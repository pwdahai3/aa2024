{"version":3,"sources":["webpack:///src/components/pubconfig/networkCompare.vue","webpack:///./src/components/pubconfig/networkCompare.vue?5447","webpack:///./src/components/pubconfig/networkCompare.vue","webpack:///src/components/dashboard/dashboard.vue","webpack:///./src/components/dashboard/dashboard.vue?6f17","webpack:///./src/components/dashboard/dashboard.vue"],"names":["networkCompare","Boolean","Date","n","d","getSeconds","line5","line6","this","flowTimeInterval","then","res","i","key","j","Mdifference","push","valData","legendData","xaxisData","seriesData","pubconfig_networkCompare","render","_vm","_h","$createElement","_c","_self","attrs","width","title","visible","isShow","close-on-click-modal","before-close","resetForm","on","update:visible","$event","staticClass","type","range-separator","start-placeholder","end-placeholder","model","value","callback","$$v","value4","expression","_v","value5","click","getAll","staticStyle","margin-top","gutter","span","directives","name","rawName","element-loading-spinner","element-loading-background","mystyle","_e","id","staticRenderFns","components_pubconfig_networkCompare","__webpack_require__","normalizeComponent","ssrContext","dashboard","pienodata","timingTaskPop","networkcp","_this2","getMountpoint","resize","handleTime","getAllchart","query","getTime","dataNow","_this3","drawCpuLine","drawMemoryLine","line3","line4","str","isCpuAlertLine","alertMarkCpu","taskTypeTxtCpu","nodes","searchIndex","fromTime","endTime","nodeArr","dataJV","item","isMemoryAlertLine","alertMarkMemory","taskTypeTxtMemory","isDiskRootAlertLine","alertMarkDiskRoot","taskTypeTxtDiskRoot","buckets","sumVal","isDiskRoot01AlertLine","alertMarkDiskRoot01","taskTypeTxtDiskRoot01","starttime","endtime","sttime","edtime","dateTimeLong","data","index","rateUnitValue","intervalUnitVal","editItem","isNetworkAlertLine","taskMark","taskName","taskObj","_this4","_this5","resolveBuckets","requestFullscreen","dashboard_dashboard","placeholder","change","chartTypeChange","chartType","label","_l","_s","_f","totalpercent","isNeedRefreshAddTask","isShowTimingTask","myTaskType","myTaskTypeTxt","taskTypeTxt","alertmark","alertMark","getTimingTask","setTimingTaskClose","isRunning","isChartEdit","editData","timingTaskform","editTaskId","isShowTimingTaskEdit","taskType","networkcpShow","isDone","src","alt","fullScreen","dashboard_Component","dashboard_normalizeComponent","__webpack_exports__"],"mappings":"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","file":"static/js/20.75686eb4dac6fed5e44c.js","sourcesContent":["<template>\r\n  <div>\r\n    <el-dialog width=\"90%\" title=\"对比\" :visible.sync=\"isShow\" :close-on-click-modal=\"false\" :before-close=\"resetForm\">\r\n        <div class=\"block\">\r\n            <el-date-picker\r\n            v-model=\"value4\"\r\n            type=\"datetimerange\"\r\n            range-separator=\"至\"\r\n            start-placeholder=\"开始日期\"\r\n            end-placeholder=\"结束日期\">\r\n            </el-date-picker>\r\n            &nbsp;对比&nbsp;\r\n            <el-date-picker\r\n            v-model=\"value5\"\r\n            type=\"datetimerange\"\r\n            range-separator=\"至\"\r\n            start-placeholder=\"开始日期\"\r\n            end-placeholder=\"结束日期\">\r\n            </el-date-picker>&nbsp;\r\n            <el-button type=\"primary\" @click=\"getAll\">确定</el-button>\r\n        </div>\r\n        <div style=\"margin-top:20px\">\r\n          <el-row :gutter=\"10\" class=\"chartRow\">\r\n        <el-col :span=\"12\">\r\n          <div class=\"chart-content\"\r\n                v-loading=\"networkLoading\"\r\n                element-loading-spinner=\"el-icon-loading\"\r\n                element-loading-background=\"rgba(0, 0, 0, 0)\">\r\n            <pienodata mystyle=\"linenodata\" v-if=\"line5Nodata\"></pienodata>\r\n            <div id=\"networkLine\" class=\"chartBox\"></div>\r\n          </div>\r\n        </el-col>\r\n        <el-col :span=\"12\">\r\n          <div class=\"chart-content\"\r\n                v-loading=\"networkLoading2\"\r\n                element-loading-spinner=\"el-icon-loading\"\r\n                element-loading-background=\"rgba(0, 0, 0, 0)\">\r\n            <pienodata mystyle=\"linenodata\" v-if=\"line6Nodata\"></pienodata>\r\n            <div id=\"networkLine2\" class=\"chartBox\"></div>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n        </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n<script>\r\nimport echarts from 'echarts';\r\nimport client from \"@/components/es/connection\";\r\nexport default{\r\n  props:{\r\n    isShow:{\r\n      type:Boolean\r\n    }\r\n  },\r\n  data(){\r\n    return{\r\n        value4: [new Date(new Date().getTime()-24*60*60*1000), new Date()],\r\n        value5: [new Date(new Date().getTime()-48*60*60*1000),new Date(new Date().getTime()-24*60*60*1000)],\r\n        myChart5:null,\r\n         myChart6:null,\r\n        flowTimeInterval:'600s',\r\n        line5Nodata:false,\r\n        line6Nodata:false,\r\n        networkLoading:false,\r\n        networkLoading2:false\r\n        \r\n    }\r\n  },\r\n  methods:{\r\n    transformMyDate(d){\r\n      d=new Date(d);\r\n      function pad(n){\r\n        return n<10 ? '0'+n : n\r\n      }\r\n      return pad(parseInt(d.getMonth())+1)+\"-\"+pad(d.getDate())+\" \"+pad(d.getHours())+':'+ pad(d.getMinutes())+':' + pad(d.getSeconds());\r\n    },\r\n    getAll(){\r\n      this.line5();\r\n      this.line6();\r\n    },\r\n    line5(){//流量\r\n      var _this=this;\r\n      _this.networkLoading=true;\r\n      _this.myChart5 = echarts.init(document.getElementById('networkLine'));\r\n      var options = {\r\n            color:['#008acd','#b6a2de','#2ec7c9','#ffb980','#d87a80','#8d98b3','#97b552','#95706d','#dc69aa','#c05050'],\r\n            title: {\r\n              text: _this.$t('lg.network'),\r\n              x:'center'\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis'\r\n            },\r\n            legend: {\r\n              type:'scroll',\r\n              itemGap: 5,\r\n              left:'3%',\r\n              right:'5%',\r\n              bottom:'0',\r\n              data:[]\r\n            },\r\n            grid: {\r\n              top:'16%',\r\n              left: '4%',\r\n              right: '5%',\r\n              bottom: '10%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              show:false,\r\n              type: 'category',\r\n              data: []\r\n            },\r\n            yAxis: {\r\n              show:false,\r\n              type: 'value',\r\n              name:'M/秒',\r\n            },\r\n            series: []\r\n          };\r\n          \r\n      function lineTimerFn(){\r\n        client.search({\r\n          index: \"shadow-metricbeat*\",\r\n          body:{\r\n            \"size\": 0,\r\n            \"sort\": {\r\n              \"@timestamp\": \"desc\"\r\n            },\r\n            \"query\": {\r\n              \"bool\": {\r\n                \"filter\":[\r\n                  {\r\n                    \"range\": {\r\n                      \"@timestamp\": {\r\n                        \"from\": _this.value4[0],\r\n                        \"to\": _this.value4[1],\r\n                        \"include_lower\": true,\r\n                        \"include_upper\": true\r\n                      }\r\n                    }\r\n                  }\r\n                ],\r\n                \"must\": [\r\n                  {\r\n                    \"term\": {\r\n                      \"metricset.name\": \"network\"\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            },\r\n            \"aggs\":{\r\n              \"groupByHost\":{\r\n                \"terms\": {\r\n                  \"field\": \"host.hostname\"\r\n                },\r\n                \"aggs\": {\r\n                  \"time_histo\": {\r\n                    \"date_histogram\": {\r\n                      \"field\": \"@timestamp\",\r\n                      \"interval\": _this.flowTimeInterval\r\n                    },\r\n                    \"aggs\": {\r\n                      \"in_sum\": {\r\n                        \"avg\": {\r\n                          \"field\": \"system.network.in.bytes\"\r\n                        }\r\n                      },\r\n                      \"out_sum\": {\r\n                        \"avg\": {\r\n                          \"field\": \"system.network.out.bytes\"\r\n                        }\r\n                      },\r\n                      \"total_sum\": {\r\n                        \"bucket_script\": {\r\n                          \"buckets_path\": {\r\n                            \"in_sum\": \"in_sum\",\r\n                            \"out_sum\": \"out_sum\"\r\n                          },\r\n                          \"script\": \"params.in_sum+params.out_sum\"\r\n                        }\r\n                      },\r\n                      \"difference\": {\r\n                        \"serial_diff\": {\r\n                          \"buckets_path\": \"total_sum\",\r\n                          \"lag\": 1\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }).then((res)=>{\r\n          // console.log(res);\r\n          var tarResult=res.aggregations?res.aggregations.groupByHost.buckets:[];\r\n          var legendData=[],sumLegendData=[],\r\n              seriesData=[],sumSeriesData=[];\r\n          if(tarResult.length==0){\r\n            options.xAxis.show=false;\r\n            options.yAxis.show=false;\r\n            _this.line5Nodata=true;//暂无数据\r\n          }else{\r\n            options.xAxis.show=true;\r\n            options.yAxis.show=true;\r\n            _this.line5Nodata=false;//有数据\r\n          }\r\n          for(var i=0;i<tarResult.length;i++){\r\n            var xaxisData=[],valData=[];\r\n            var dataI=tarResult[i];\r\n            legendData.push(dataI.key);\r\n            for(var j=0;j<dataI.time_histo.buckets.length;j++){\r\n              var dataJ=dataI.time_histo.buckets[j];\r\n              // xaxisData.push(_this.transformMyDate(dataJ.key));\r\n              // valData.push(dataJ.doc_count);\r\n              if(dataJ.difference){\r\n                xaxisData.push(_this.transformMyDate(dataJ.key));\r\n                var Mdifference = Math.floor(dataJ.difference.value/1024/1024)/10\r\n                valData.push(Mdifference);\r\n              }\r\n            }\r\n            // console.log(valData)\r\n            seriesData.push(\r\n              {\r\n                name:dataI.key,\r\n                type:'line',\r\n                data:valData\r\n              }\r\n            );\r\n          }\r\n          options.legend.data=legendData;\r\n          options.xAxis.data=xaxisData;\r\n          options.series=seriesData;\r\n          _this.myChart5.setOption(options,true);\r\n          _this.networkLoading=false;\r\n        });\r\n      }\r\n      lineTimerFn();\r\n    },\r\n    line6(){//流量\r\n      var _this=this;\r\n      _this.networkLoading2=true;\r\n      _this.myChart6 = echarts.init(document.getElementById('networkLine2'));\r\n      var options = {\r\n            color:['#008acd','#b6a2de','#2ec7c9','#ffb980','#d87a80','#8d98b3','#97b552','#95706d','#dc69aa','#c05050'],\r\n            title: {\r\n              text: _this.$t('lg.network'),\r\n              x:'center'\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis'\r\n            },\r\n            legend: {\r\n              type:'scroll',\r\n              itemGap: 5,\r\n              left:'3%',\r\n              right:'5%',\r\n              bottom:'0',\r\n              data:[]\r\n            },\r\n            grid: {\r\n              top:'16%',\r\n              left: '4%',\r\n              right: '5%',\r\n              bottom: '10%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              show:false,\r\n              type: 'category',\r\n              data: []\r\n            },\r\n            yAxis: {\r\n              show:false,\r\n              type: 'value',\r\n              name:'M/秒',\r\n            },\r\n            series: []\r\n          };\r\n          \r\n      function lineTimerFn(){\r\n        client.search({\r\n          index: \"shadow-metricbeat*\",\r\n          body:{\r\n            \"size\": 0,\r\n            \"sort\": {\r\n              \"@timestamp\": \"desc\"\r\n            },\r\n            \"query\": {\r\n              \"bool\": {\r\n                \"filter\":[\r\n                  {\r\n                    \"range\": {\r\n                      \"@timestamp\": {\r\n                        \"from\": _this.value5[0],\r\n                        \"to\": _this.value5[1],\r\n                        \"include_lower\": true,\r\n                        \"include_upper\": true\r\n                      }\r\n                    }\r\n                  }\r\n                ],\r\n                \"must\": [\r\n                  {\r\n                    \"term\": {\r\n                      \"metricset.name\": \"network\"\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            },\r\n            \"aggs\":{\r\n              \"groupByHost\":{\r\n                \"terms\": {\r\n                  \"field\": \"host.hostname\"\r\n                },\r\n                \"aggs\": {\r\n                  \"time_histo\": {\r\n                    \"date_histogram\": {\r\n                      \"field\": \"@timestamp\",\r\n                      \"interval\": _this.flowTimeInterval\r\n                    },\r\n                    \"aggs\": {\r\n                      \"in_sum\": {\r\n                        \"avg\": {\r\n                          \"field\": \"system.network.in.bytes\"\r\n                        }\r\n                      },\r\n                      \"out_sum\": {\r\n                        \"avg\": {\r\n                          \"field\": \"system.network.out.bytes\"\r\n                        }\r\n                      },\r\n                      \"total_sum\": {\r\n                        \"bucket_script\": {\r\n                          \"buckets_path\": {\r\n                            \"in_sum\": \"in_sum\",\r\n                            \"out_sum\": \"out_sum\"\r\n                          },\r\n                          \"script\": \"params.in_sum+params.out_sum\"\r\n                        }\r\n                      },\r\n                      \"difference\": {\r\n                        \"serial_diff\": {\r\n                          \"buckets_path\": \"total_sum\",\r\n                          \"lag\": 1\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }).then((res)=>{\r\n          // console.log(res);\r\n          var tarResult=res.aggregations?res.aggregations.groupByHost.buckets:[];\r\n          var legendData=[],sumLegendData=[],\r\n              seriesData=[],sumSeriesData=[];\r\n          if(tarResult.length==0){\r\n            options.xAxis.show=false;\r\n            options.yAxis.show=false;\r\n            _this.line6Nodata=true;//暂无数据\r\n          }else{\r\n            options.xAxis.show=true;\r\n            options.yAxis.show=true;\r\n            _this.line6Nodata=false;//有数据\r\n          }\r\n          for(var i=0;i<tarResult.length;i++){\r\n            var xaxisData=[],valData=[];\r\n            var dataI=tarResult[i];\r\n            legendData.push(dataI.key);\r\n            for(var j=0;j<dataI.time_histo.buckets.length;j++){\r\n              var dataJ=dataI.time_histo.buckets[j];\r\n              // xaxisData.push(_this.transformMyDate(dataJ.key));\r\n              // valData.push(dataJ.doc_count);\r\n              if(dataJ.difference){\r\n                xaxisData.push(_this.transformMyDate(dataJ.key));\r\n                var Mdifference = Math.floor(dataJ.difference.value/1024/1024)/10\r\n                valData.push(Mdifference);\r\n              }\r\n            }\r\n            // console.log(valData)\r\n            seriesData.push(\r\n              {\r\n                name:dataI.key,\r\n                type:'line',\r\n                data:valData\r\n              }\r\n            );\r\n          }\r\n          options.legend.data=legendData;\r\n          options.xAxis.data=xaxisData;\r\n          options.series=seriesData;\r\n          _this.myChart6.setOption(options,true);\r\n          _this.networkLoading2=false;\r\n        });\r\n      }\r\n      lineTimerFn();\r\n    },\r\n    resetForm(){\r\n      this.myChart5=null;\r\n      this.myChart6=null;\r\n      this.$emit(\"isDone\")\r\n    }\r\n  },\r\n  components:{\r\n\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.networklinebox{\r\n  display: flex;\r\n}\r\n.chartBox{\r\n  flex: 1;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/components/pubconfig/networkCompare.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('el-dialog',{attrs:{\"width\":\"90%\",\"title\":\"对比\",\"visible\":_vm.isShow,\"close-on-click-modal\":false,\"before-close\":_vm.resetForm},on:{\"update:visible\":function($event){_vm.isShow=$event}}},[_c('div',{staticClass:\"block\"},[_c('el-date-picker',{attrs:{\"type\":\"datetimerange\",\"range-separator\":\"至\",\"start-placeholder\":\"开始日期\",\"end-placeholder\":\"结束日期\"},model:{value:(_vm.value4),callback:function ($$v) {_vm.value4=$$v},expression:\"value4\"}}),_vm._v(\"\\n           对比 \\n          \"),_c('el-date-picker',{attrs:{\"type\":\"datetimerange\",\"range-separator\":\"至\",\"start-placeholder\":\"开始日期\",\"end-placeholder\":\"结束日期\"},model:{value:(_vm.value5),callback:function ($$v) {_vm.value5=$$v},expression:\"value5\"}}),_vm._v(\" \\n          \"),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":_vm.getAll}},[_vm._v(\"确定\")])],1),_vm._v(\" \"),_c('div',{staticStyle:{\"margin-top\":\"20px\"}},[_c('el-row',{staticClass:\"chartRow\",attrs:{\"gutter\":10}},[_c('el-col',{attrs:{\"span\":12}},[_c('div',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.networkLoading),expression:\"networkLoading\"}],staticClass:\"chart-content\",attrs:{\"element-loading-spinner\":\"el-icon-loading\",\"element-loading-background\":\"rgba(0, 0, 0, 0)\"}},[(_vm.line5Nodata)?_c('pienodata',{attrs:{\"mystyle\":\"linenodata\"}}):_vm._e(),_vm._v(\" \"),_c('div',{staticClass:\"chartBox\",attrs:{\"id\":\"networkLine\"}})],1)]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":12}},[_c('div',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.networkLoading2),expression:\"networkLoading2\"}],staticClass:\"chart-content\",attrs:{\"element-loading-spinner\":\"el-icon-loading\",\"element-loading-background\":\"rgba(0, 0, 0, 0)\"}},[(_vm.line6Nodata)?_c('pienodata',{attrs:{\"mystyle\":\"linenodata\"}}):_vm._e(),_vm._v(\" \"),_c('div',{staticClass:\"chartBox\",attrs:{\"id\":\"networkLine2\"}})],1)])],1)],1)])],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-6f675754\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/pubconfig/networkCompare.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6f675754\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./networkCompare.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./networkCompare.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./networkCompare.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6f675754\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./networkCompare.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-6f675754\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/pubconfig/networkCompare.vue\n// module id = null\n// module chunks = ","<template>\r\n  <div class=\"dashboard-wrapper\">\r\n\r\n    <div class=\"changePanel\" v-show=\"isShowQueryPanel\">\r\n      <div class=\"changeBox\">\r\n        <el-select v-model=\"chartType\" placeholder=\"请选择\" @change=\"chartTypeChange\">\r\n          <el-option label=\"防御节点\" value=\"shadow\"></el-option>\r\n          <el-option label=\"管理平台\" value=\"cm\"></el-option>\r\n        </el-select>\r\n      </div>\r\n    </div>\r\n    <div class=\"dashboardContent\">\r\n      <el-row :gutter=\"10\" class=\"chartRow\">\r\n        <el-col :span=\"12\">\r\n          <div  class=\"chart-content\" \r\n                v-loading=\"cpuLoading\"\r\n                element-loading-spinner=\"el-icon-loading\"\r\n                element-loading-background=\"rgba(0, 0, 0, 0)\">\r\n            <pienodata mystyle=\"linenodata\" v-if=\"cpuLineNodata\"></pienodata>\r\n            <div id=\"cpuLineContainer\" class=\"chartBox\"></div>\r\n          </div>\r\n        </el-col>\r\n        <el-col :span=\"12\">\r\n          <div class=\"chart-content\"\r\n                v-loading=\"memoryLoading\"\r\n                element-loading-spinner=\"el-icon-loading\"\r\n                element-loading-background=\"rgba(0, 0, 0, 0)\">\r\n            <pienodata  mystyle=\"linenodata\" v-if=\"memoryLineNodata\"></pienodata>\r\n            <div id=\"memoryLineContainer\" class=\"chartBox\"></div>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n      <!-- <el-row :gutter=\"10\" class=\"chartRow\">\r\n        <el-col :span=\"12\">\r\n          <div class=\"chart-content\"\r\n                v-loading=\"diskRootLoading\"\r\n                element-loading-spinner=\"el-icon-loading\"\r\n                element-loading-background=\"rgba(0, 0, 0, 0)\">\r\n            <pienodata mystyle=\"linenodata\" v-if=\"diskRootLineNodata\"></pienodata>\r\n            <div id=\"diskRootLineContainer\" class=\"chartBox\"></div>\r\n          </div>\r\n        </el-col>\r\n        <el-col :span=\"12\">\r\n          <div class=\"chart-content\"\r\n                v-loading=\"diskRoot01Loading\"\r\n                element-loading-spinner=\"el-icon-loading\"\r\n                element-loading-background=\"rgba(0, 0, 0, 0)\">\r\n            <pienodata mystyle=\"linenodata\" v-if=\"diskRoot01LineNodata\"></pienodata>\r\n            <div id=\"diskRoot01LineContainer\" class=\"chartBox\"></div>\r\n          </div>\r\n        </el-col>\r\n      </el-row> -->\r\n\r\n      <el-row :gutter=\"10\" class=\"chartRow\" v-if=\"chartType=='shadow'\">\r\n        <el-col :span=\"12\">\r\n          <div class=\"chart-content\"\r\n                v-loading=\"tcpLoading\"\r\n                element-loading-spinner=\"el-icon-loading\"\r\n                element-loading-background=\"rgba(0, 0, 0, 0)\">\r\n            <pienodata  mystyle=\"linenodata\" v-if=\"line3Nodata\"></pienodata>\r\n            <div id=\"myLine3\" class=\"chartBox\"></div>\r\n          </div>\r\n        </el-col>\r\n        <el-col :span=\"12\">\r\n          <div class=\"chart-content\"\r\n                v-loading=\"httprequestLoading\"\r\n                element-loading-spinner=\"el-icon-loading\"\r\n                element-loading-background=\"rgba(0, 0, 0, 0)\">\r\n            <pienodata  mystyle=\"linenodata\" v-if=\"line4Nodata\"></pienodata>\r\n            <div id=\"myLine4\" class=\"chartBox\"></div>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n\r\n      <el-row :gutter=\"10\" class=\"chartRow\" v-if=\"chartType=='shadow'\">\r\n        <el-col :span=\"12\">\r\n          <div class=\"chart-content\"\r\n                v-loading=\"networkLoading\"\r\n                element-loading-spinner=\"el-icon-loading\"\r\n                element-loading-background=\"rgba(0, 0, 0, 0)\">\r\n            <pienodata mystyle=\"linenodata\" v-if=\"line5Nodata\"></pienodata>\r\n            <div id=\"myLine5\" class=\"chartBox\"></div>\r\n          </div>\r\n        </el-col>\r\n        <el-col :span=\"12\">\r\n          <div class=\"mountpointbox\">\r\n            <h3 class=\"mountpointtitle\">磁盘空间占比</h3>\r\n            <p class=\"line6Nodata\" v-if=\"line6Nodata\">暂无数据</p>\r\n            <div class=\"mountpoint\" v-for=\"item in mountPointData\">\r\n              <span class=\"item\">{{item.key}}</span> <span class=\"item\">{{item.totalpercent.value|percentFormat}}</span>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n    \r\n    <!-- 添加报警任务 -->\r\n    <timing-task-pop :isNeedRefreshAddTask=\"true\" :isShow=\"isShowTimingTask\" :myTaskType=\"'esSearch'\" :myTaskTypeTxt=\"taskTypeTxt\" :alertmark=\"alertMark\" @getTimingTask=\"getAllchart\" @setTimingTaskClose=\"isShowTimingTask=false\"></timing-task-pop>\r\n    <!-- 编辑报警任务 -->\r\n    <timing-task-pop :isRunning=\"isRunning\" :isChartEdit='isChartEdit' :editData=\"timingTaskform\" :editTaskId=\"editTaskId\" :isShow=\"isShowTimingTaskEdit\" :isShowTimingTaskEdit=\"isShowTimingTaskEdit\" :myTaskType=\"timingTaskform.taskType\" :myTaskTypeTxt=\"taskTypeTxt\" :alertmark=\"alertMark\" @getTimingTask=\"getAllchart\" @setTimingTaskClose=\"isShowTimingTaskEdit=false\"></timing-task-pop>\r\n    \r\n\r\n    <networkcp :isShow=\"networkcpShow\" @isDone=\"networkcpShow=false\"></networkcp>\r\n    <!-- 右侧操作列表 -->\r\n    <ul class=\"operationBtnUl\"\r\n        v-show=\"isShowGridMenu\">\r\n      <li>\r\n        <img src=\"static/icon/fullScreen.png\"\r\n             alt=\"大屏展示\"\r\n             title=\"大屏展示\"\r\n             @click=\"fullScreen\">\r\n      </li>\r\n    </ul>\r\n\r\n  </div>\r\n</template>\r\n<script>\r\nimport echarts from 'echarts';\r\nimport axios from 'axios';\r\nimport {SERVER_API_URL} from '@/conf/constvar';\r\nimport client from \"@/components/es/connection\";\r\nimport * as types from '@/store/types';\r\nimport pienodata from '@/basecomponents/pienodata';\r\n// import toSddate from '@/assets/js/tosddate';\r\nimport toISO8601 from '@/assets/js/iso8601';\r\nimport timingTaskPop from '@/components/alarmTask/timingTaskPop';\r\nimport networkcp from '@/components/pubconfig/networkCompare'\r\nexport default {\r\n  components:{\r\n    pienodata,\r\n    timingTaskPop,\r\n    networkcp\r\n  },\r\n  data() {\r\n    return {\r\n      networkcpShow:false,\r\n      mountPointData:[],\r\n      chartType:'shadow',//两种图表 一种cm、一种es 切换显示\r\n\r\n      fromTime:0,\r\n      endTime:0,\r\n      timeinterval:'',\r\n      flowTimeInterval:'',\r\n\r\n      cpuLineNodata:false,\r\n      memoryLineNodata:false,\r\n      line3Nodata:false,\r\n      line4Nodata:false,\r\n      line5Nodata:false,\r\n      line6Nodata:false,\r\n      diskRootLineNodata:false,\r\n      diskRoot01LineNodata:false,\r\n     \r\n      cpuLineChart:null,\r\n      memoryLineChart:null,\r\n      myChart3:null,\r\n      myChart4:null,\r\n      myChart5:null,\r\n      diskRootLineChart:null,\r\n      diskRoot01LineChart:null,\r\n      \r\n      cpuLoading:false,\r\n      memoryLoading:false,//memory\r\n      diskRootLoading:false,//磁盘空间（/）\r\n      diskRoot01Loading:false,\r\n      tcpLoading:false,\r\n      httprequestLoading:false,\r\n      networkLoading:false,\r\n      \r\n      // isAlertingShow:false,\r\n      // alertMark:'',\r\n      // alertTitle:'',\r\n      // alertData:{},\r\n      // alertLine:false,\r\n\r\n    // 报警任务\r\n      isShowTimingTask:false,\r\n      taskTypeTxt:'',\r\n      alertMark:'',\r\n\r\n      // 编辑报警任务\r\n      isShowTimingTaskEdit:false,\r\n      editTaskId: null, //编辑当前任务的id\r\n      timingTaskform:{},//存储被修改项\r\n      isRunning:false,//任务的运行状态（图表报警都能在当前页面进行编辑）当运行状态为true时，是不能进行编辑操作的\r\n      isChartEdit:true,//如果把这个值传给子组件，表示此时的子组件是在 图表报警的父组件里调用的 这时，报警任务可以进行开启和暂停\r\n\r\n      isNetworkAlertLine:false,//为true则代表当前图表有报警任务,需要做标记线  //流量\r\n      isNetworkAlertData:{},\r\n      networkConditionData:0,\r\n      isNetworkRunning:false,\r\n\r\n      publicChart:{\r\n        shadow:{\r\n          searchIndex:'shadow-metricbeat*',//shadow\r\n\r\n          isCpuAlertLine:false,//为true则代表当前图表有报警任务,需要做标记线\r\n          isCpuAlertData:{},//储存邮件报警参数\r\n          cpuConditionData:0,//划线数值\r\n          isCpuRunning:false,//记录单个任务的运行状态\r\n\r\n          isMemoryAlertLine:false,\r\n          isMemoryAlertData:{},\r\n          memoryConditionData:0,\r\n          isMemoryRunning:false,\r\n        \r\n          isDiskRootAlertLine:false,\r\n          isDiskRootAlertData:{},\r\n          diskRootConditionData:0,\r\n          isDiskRootRunning:false,\r\n\r\n          isDiskRoot01AlertLine:false,\r\n          isDiskRoot01AlertData:{},\r\n          diskRoot01ConditionData:0,\r\n          isDiskRoot01Running:false,\r\n\r\n          alertMarkCpu:'cpuMax',\r\n          taskTypeTxtCpu:this.$t('lg.cpubased'),\r\n          alertMarkMemory:'memoryMax',\r\n          taskTypeTxtMemory:this.$t('lg.memorybased'),\r\n          alertMarkDiskRoot:'diskRootMax',\r\n          taskTypeTxtDiskRoot:this.$t('lg.diskRootbased'),\r\n          alertMarkDiskRoot01:'diskRoot01Max',\r\n          taskTypeTxtDiskRoot01:this.$t('lg.diskRoot01based'),\r\n        },\r\n        cm:{\r\n          searchIndex:'cm-metricbeat*',//cm\r\n\r\n          isCpuAlertLine:false,//为true则代表当前图表有报警任务,需要做标记线   \r\n          isCpuAlertData:{},//储存邮件报警参数\r\n          cpuConditionData:0,//划线数值\r\n          isCpuRunning:false,//记录单个任务的运行状态\r\n\r\n          isMemoryAlertLine:false,  \r\n          isMemoryAlertData:{},\r\n          memoryConditionData:0,\r\n          isMemoryRunning:false,\r\n\r\n          isDiskRootAlertLine:false,  \r\n          isDiskRootAlertData:{},\r\n          diskRootConditionData:0,\r\n          isDiskRootRunning:false,\r\n\r\n          isDiskRoot01AlertLine:false, \r\n          isDiskRoot01AlertData:{},\r\n          diskRoot01ConditionData:0,\r\n          isDiskRoot01Running:false,\r\n\r\n          alertMarkCpu:'cpu_cmMax',\r\n          taskTypeTxtCpu:'基于‘管理平台的CPU’报警',\r\n          alertMarkMemory:'memory_cmMax',\r\n          taskTypeTxtMemory:'基于‘管理平台的MEMORY’报警',\r\n          alertMarkDiskRoot:'diskRoot_cmMax',\r\n          taskTypeTxtDiskRoot:'基于‘管理平台的磁盘空间（/）’报警',\r\n          alertMarkDiskRoot01:'diskRoot01_cmMax',\r\n          taskTypeTxtDiskRoot01:'基于‘管理平台的磁盘空间（/home）’报警',\r\n        },\r\n      },\r\n\r\n      //大屏展示\r\n      isShowQueryPanel:true,//上方查询面板大屏展示时要隐藏\r\n      isShowGridMenu:true,//右下角菜单大屏展示时要隐藏\r\n    }\r\n  },\r\n  created(){\r\n    this.getMountpoint();\r\n    // this.$store.state.isShowTimerate = true;//采样频率选择\r\n    // this.$store.state.mydatedata.interval = '5m';\r\n    // this.$store.state.mydatedata.flowInterval = '10s';\r\n    // this.$store.state.timerateValue='采样频率';\r\n    this.$store.state.nowTimeVal=[new Date(new Date().getTime()-24*60*60*1000), new Date()];//这个页面时间范围默认取回一天\r\n   \r\n    window.addEventListener(\"resize\", () => {\r\n      this.cpuLineChart.resize();\r\n      this.memoryLineChart.resize();\r\n      this.myChart3.resize();\r\n      this.myChart4.resize();\r\n      this.myChart5.resize();\r\n      this.diskRootLineChart.resize();\r\n      this.diskRoot01LineChart.resize();\r\n    });\r\n  },\r\n  watch:{\r\n    '$store.state.mydatedata.timestampnow':function(){\r\n      this.handleTime();\r\n      this.getAllchart();\r\n      this.getMountpoint();\r\n    },\r\n    '$store.state.isMenuShow':function(){\r\n      this.cpuLineChart.resize();\r\n      this.memoryLineChart.resize();\r\n      this.myChart3.resize();\r\n      this.myChart4.resize();\r\n      this.myChart5.resize();\r\n     // this.diskRootLineChart.resize();\r\n     // this.diskRoot01LineChart.resize();\r\n    }\r\n  },\r\n  mounted() {\r\n    if(this.$route.query.timeInterval){//从邮件报警页面点击查看跳转过来，要根据邮件报警的查询间隔时间来改变右上角时间\r\n      var paramUrl = this.$route.query;\r\n      var dataNow = new Date().getTime();\r\n\r\n      var timeIntervalNum = paramUrl.timeInterval.match(/(\\d*)(\\w*)/)[1];\r\n      var timeIntervalUnit = paramUrl.timeInterval.match(/(\\d*)(\\w*)/)[2];\r\n\r\n      var timeStrVal = 0;\r\n      switch(timeIntervalUnit)\r\n      { \r\n        case \"m\":\r\n        timeStrVal = dataNow - timeIntervalNum*60*1000;\r\n        break;\r\n        case \"h\":\r\n        timeStrVal = dataNow - timeIntervalNum*60*60*1000;\r\n        break;\r\n        default:\r\n        timeStrVal = dataNow - timeIntervalNum*24*60*60*1000;\r\n      };\r\n      this.$store.state.nowTimeVal=[new Date(timeStrVal),new Date(dataNow)];\r\n      this.$store.state.refreshAble=true;//禁用自动刷新\r\n      this.$store.commit(types.MYDATEPICKER);\r\n    }\r\n\r\n    //从邮件报警页面点击查看跳转过来，要根据路由上的theChartType来显示防御节点或管理平台的表\r\n    if(this.$route.query.theChartType=='cpu_cmMax' || this.$route.query.theChartType=='memory_cmMax' || this.$route.query.theChartType=='diskRoot_cmMax' || this.$route.query.theChartType=='diskRoot01_cmMax'){\r\n      this.chartType='cm';\r\n    }else{\r\n      this.chartType='shadow';\r\n    }\r\n    // this.$nextTick(()=>{\r\n      // console.log(this.$route.query.theChartType)\r\n      this.handleTime();\r\n      this.getAllchart();\r\n    // })\r\n  },\r\n  methods: {\r\n    chartTypeChange(val){\r\n      this.getAllchart();\r\n    },\r\n    getAllchart(taskType){\r\n      if(this.chartType=='shadow'){\r\n        if(!taskType){\r\n          this.getTimingTask().then((nodes)=>{\r\n            this.drawCpuLine();\r\n            this.drawMemoryLine();\r\n            this.line3();\r\n            this.line4();\r\n            this.line5();\r\n          //  this.drawDiskRootLine();\r\n           // this.drawDiskRoot01Line();\r\n          })\r\n        }else{\r\n          if(taskType=='cpuMax'){\r\n            this.getTimingTask(taskType).then((nodes)=>{\r\n              this.drawCpuLine();\r\n            })\r\n          }else if(taskType=='memoryMax'){\r\n            this.getTimingTask(taskType).then((nodes)=>{\r\n              this.drawMemoryLine();\r\n            })\r\n          }else if(taskType=='networkMax'){\r\n            this.getTimingTask(taskType).then((nodes)=>{\r\n              this.line5();\r\n            })  \r\n          }//else if(taskType=='diskRootMax'){\r\n          //   this.getTimingTask(taskType).then((nodes)=>{\r\n          //     this.drawDiskRootLine();\r\n          //   }) \r\n          // }else if(taskType=='diskRoot01Max'){\r\n          //   this.getTimingTask(taskType).then((nodes)=>{\r\n          //     this.drawDiskRoot01Line();\r\n          //   }) \r\n          // }\r\n        }\r\n      }else{\r\n        if(!taskType){\r\n          this.getTimingTask().then((nodes)=>{\r\n            this.drawCpuLine();\r\n            this.drawMemoryLine();\r\n          //  this.drawDiskRootLine();\r\n          //  this.drawDiskRoot01Line();\r\n          })\r\n        }else{\r\n          if(taskType=='cpu_cmMax'){\r\n            this.getTimingTask(taskType).then((nodes)=>{\r\n              this.drawCpuLine();\r\n            }) \r\n          }else if(taskType=='memory_cmMax'){\r\n            this.getTimingTask(taskType).then((nodes)=>{\r\n              this.drawMemoryLine();\r\n            }) \r\n          }//else if(taskType=='diskRoot_cmMax'){\r\n          //   this.getTimingTask(taskType).then((nodes)=>{\r\n          //     this.drawDiskRootLine();\r\n          //   }) \r\n          // }else if(taskType=='diskRoot01_cmMax'){\r\n          //   this.getTimingTask(taskType).then((nodes)=>{\r\n          //     this.drawDiskRoot01Line();\r\n          //   }) \r\n          // }\r\n        }\r\n      }\r\n    },\r\n    //.start cm shadow共有图表\r\n    drawCpuLine(){\r\n      var _this=this;\r\n      _this.cpuLoading=true;\r\n      _this.cpuLineChart = echarts.init(document.getElementById('cpuLineContainer'));\r\n      \r\n      var options = {\r\n            color:['#3fb1e3','#6be6c1','#626c91','#a0a7e6','#96dee8'],\r\n            title: {\r\n              text: 'CPU',\r\n              x:'center'\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              formatter: function (params) {\r\n                var str=\"\";\r\n                for(var i=0;i<params.length;i++){\r\n                  str+=params[i].marker+params[i].seriesName+\": \" + params[i].name+\" ( \"+ Math.round(params[i].value*10000)/100+'%'+\" ) \"+'<br />' \r\n                }\r\n                return str;\r\n              },\r\n            },\r\n            toolbox: {\r\n              right:'10',\r\n              top:'10',\r\n              feature: {\r\n                myTool1: {\r\n                  show: !_this.publicChart[_this.chartType].isCpuAlertLine,\r\n                  title: _this.$t('lg.alertingtask'),\r\n                  icon: 'image://static/icon/stopBell.png',\r\n                  onclick: function (){\r\n                    _this.alertMark=_this.publicChart[_this.chartType].alertMarkCpu;\r\n                    _this.taskTypeTxt=_this.publicChart[_this.chartType].taskTypeTxtCpu;\r\n                    _this.isShowTimingTask=true;\r\n                  }\r\n                },\r\n                myTool2: {\r\n                  show: _this.publicChart[_this.chartType].isCpuAlertLine,\r\n                  title: _this.$t('lg.alertingtask'),\r\n                  icon: 'image://static/icon/startBell.png',\r\n                  onclick: function (){\r\n                    _this.upSingleTaskData(_this.publicChart[_this.chartType].isCpuAlertData,_this.publicChart[_this.chartType].alertMarkCpu,_this.publicChart[_this.chartType].taskTypeTxtCpu);\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            legend: {\r\n              type:'scroll',\r\n              itemGap: 5,\r\n              left:'3%',\r\n              right:'5%',\r\n              bottom:'0',\r\n              data:[]\r\n            },\r\n            grid: {\r\n              top:'16%',\r\n              left: '4%',\r\n              right: '5%',\r\n              bottom: '10%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              show:false,\r\n              type: 'category',\r\n              data: []\r\n            },\r\n            yAxis: {\r\n              show:false,\r\n              type: 'value',\r\n              name:'%',\r\n              axisLabel: {\r\n                formatter: function (val) {\r\n                  return Math.round(val*10000)/100\r\n                }\r\n              }\r\n            },\r\n            series: [\r\n              // {\r\n              //     name:'Step Start',\r\n              //     type:'line',\r\n              //     step: 'start',\r\n              //     data:[120, 132, 101, 134, 90, 230, 210]\r\n              // },\r\n            ]\r\n          };\r\n      // myChart.setOption(options);\r\n      _this.lineTimer().then((nodes)=>{\r\n        var nodeArr=[];\r\n        for(var n=0;n<nodes.length;n++){\r\n          nodeArr.push(\r\n            nodes[n].key\r\n          )\r\n        }\r\n        \r\n        client.search({\r\n          index: _this.publicChart[_this.chartType].searchIndex,\r\n          body: {\r\n            \"size\": 0,\r\n            \"sort\": {\r\n              \"@timestamp\": \"desc\"\r\n            },\r\n            \"query\":{\r\n              \"bool\": {\r\n                \"filter\":[\r\n                  {\r\n                    \"range\": {\r\n                      \"@timestamp\": {\r\n                        \"from\": _this.fromTime,\r\n                        \"to\": _this.endTime,\r\n                        \"include_lower\": true,\r\n                        \"include_upper\": true\r\n                      }\r\n                    }\r\n                  }\r\n                ],\r\n                \"must\": [\r\n                  {\r\n                    \"term\": {\r\n                      \"metricset.name\": \"cpu\"\r\n                    }\r\n                  },\r\n                  {\r\n                    \"terms\": {\r\n                      \"host.name\":nodeArr\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            },\r\n            \"aggs\": {\r\n              \"groupbyhost\":{\r\n                \"terms\": {\r\n                  \"field\": \"host.hostname\",\r\n                  \"min_doc_count\": 0\r\n                },\r\n                \"aggs\": {\r\n                  \"time_histo\": {                  \r\n                    \"date_histogram\": {\r\n                      \"field\": \"@timestamp\",\r\n                      \"interval\": _this.flowTimeInterval,\r\n                      \"extended_bounds\": {\r\n                        \"min\": _this.fromTime,\r\n                        \"max\": _this.endTime\r\n                      }\r\n                    },\r\n                    \"aggs\": {\r\n                      \"total_sum\": {\r\n                        \"avg\": {\r\n                          \"field\": \"system.cpu.system.pct\"\r\n                        }\r\n                      },\r\n                      \"difference\": {\r\n                        \"serial_diff\": {                \r\n                          \"buckets_path\": \"total_sum\",\r\n                          \"lag\" : 1\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }).then((res)=>{\r\n          // console.log(res)\r\n\r\n          // if(!res.aggregations){//当数据没打到metricbeat上时，可能连aggregations属性都没有，这时只能显示暂无数据\r\n          //   _this.cpuLineChart.clear();\r\n          //   _this.cpuLineNodata=true;\r\n          //   _this.cpuLoading=false;\r\n          //   return false;\r\n          // }\r\n         \r\n          //数据打到了metricbeat上（再分两种情况=>有数据，暂无数据）\r\n          var tarResult=res.aggregations?res.aggregations.groupbyhost.buckets:[];\r\n          var legendData=[],seriesData=[];\r\n          if(tarResult.length==0){\r\n            options.xAxis.show=false;\r\n            options.yAxis.show=false;\r\n            _this.cpuLineNodata=true;//暂无数据\r\n          }else{\r\n            options.xAxis.show=true;\r\n            options.yAxis.show=true;\r\n            _this.cpuLineNodata=false;//有数据\r\n          }\r\n          for(var i=0;i<tarResult.length;i++){\r\n            var xaxisData=[],valData=[];\r\n            var dataI=tarResult[i];\r\n            legendData.push(dataI.key);\r\n            for(var j=0;j<dataI.time_histo.buckets.length;j++){\r\n              var dataJ=dataI.time_histo.buckets[j];\r\n              var dataJV=dataJ.total_sum.value;\r\n              if(!dataJV){\r\n                dataJV=0\r\n              }\r\n              xaxisData.push(_this.transformMyDate(dataJ.key));\r\n              valData.push(dataJV);\r\n            }\r\n            seriesData.push(\r\n              {\r\n                name:dataI.key,\r\n                // areaStyle: {},\r\n                type:'line',\r\n                data:valData\r\n              }\r\n            );\r\n          }\r\n          if(_this.publicChart[_this.chartType].isCpuAlertLine && _this.publicChart[_this.chartType].isCpuRunning){\r\n            seriesData=seriesData.map((item)=>{\r\n              item.markLine= {\r\n                \"symbol\":\"none\",\r\n                \"silent\": true,\r\n                \"lineStyle\":{\r\n                  \"type\":'dashed',\r\n                  \"color\":\"#893448\"\r\n                },\r\n                \"data\": [{\r\n                    \"yAxis\": _this.publicChart[_this.chartType].cpuConditionData/100+'',\r\n                    \"label\":{\r\n                      formatter:function(params){\r\n                        return params.value*100+'%'\r\n                      }\r\n                    }\r\n                }]\r\n              }\r\n              return item;\r\n            })\r\n          }else if(_this.publicChart[_this.chartType].isCpuAlertLine && !_this.publicChart[_this.chartType].isCpuRunning){\r\n            options.toolbox.feature.myTool2.icon='image://static/icon/stopBell.png';\r\n          }\r\n\r\n          options.legend.data=legendData;\r\n          options.xAxis.data=xaxisData;\r\n          options.series=seriesData;\r\n          _this.cpuLineChart.setOption(options,true);\r\n          _this.cpuLoading=false;\r\n        });\r\n      })\r\n    },\r\n    drawMemoryLine(){\r\n      var _this=this;\r\n      _this.memoryLoading=true;\r\n      _this.memoryLineChart = echarts.init(document.getElementById('memoryLineContainer'));\r\n      \r\n      var options = {\r\n            color:['#2b821d','#22c3aa','#96dee8','#7bd9a5','#22c3aa'],\r\n            title: {\r\n              text: 'MEMORY',\r\n              x:'center'\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              formatter: function (params) {\r\n                var str=\"\";\r\n                for(var i=0;i<params.length;i++){\r\n                  str+=params[i].marker+params[i].seriesName+\": \" + params[i].name+\"   ( \"+ Math.round(params[i].value*10000)/100+'%'+\" ) \"+'<br />' \r\n                }\r\n                return str;\r\n              },\r\n            },\r\n            toolbox: {\r\n              right:'10',\r\n              top:'10',\r\n              feature: {\r\n                myTool1: {\r\n                  show: !_this.publicChart[_this.chartType].isMemoryAlertLine,\r\n                  title: _this.$t('lg.alertingtask'),\r\n                  icon: 'image://static/icon/stopBell.png',\r\n                  onclick: function (){\r\n                    _this.alertMark=_this.publicChart[_this.chartType].alertMarkMemory;\r\n                    _this.taskTypeTxt=_this.publicChart[_this.chartType].taskTypeTxtMemory;\r\n                    _this.isShowTimingTask=true;\r\n                  }\r\n                },\r\n                myTool2: {\r\n                  show: _this.publicChart[_this.chartType].isMemoryAlertLine,\r\n                  title: _this.$t('lg.alertingtask'),\r\n                  icon: 'image://static/icon/startBell.png',\r\n                  onclick: function (){\r\n                    _this.upSingleTaskData(_this.publicChart[_this.chartType].isMemoryAlertData,_this.publicChart[_this.chartType].alertMarkMemory,_this.publicChart[_this.chartType].taskTypeTxtMemory);\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            legend: {\r\n              type:'scroll',\r\n              itemGap: 5,\r\n              left:'3%',\r\n              right:'5%',\r\n              bottom:'0',\r\n              data:[]\r\n            },\r\n            grid: {\r\n              top:'16%',\r\n              left: '4%',\r\n              right: '5%',\r\n              bottom: '10%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              show:false,\r\n              type: 'category',\r\n              data: []\r\n            },\r\n            yAxis: {\r\n              show:false,\r\n              type: 'value',\r\n              name:'%',\r\n              axisLabel: {\r\n                formatter: function (val) {\r\n                  return Math.round(val*10000)/100\r\n                }\r\n              }\r\n            },\r\n            series: []\r\n          };\r\n     \r\n        _this.lineTimer().then((nodes)=>{\r\n          var nodeArr=[];\r\n          for(var n=0;n<nodes.length;n++){\r\n            nodeArr.push(\r\n              nodes[n].key\r\n            )\r\n          }\r\n          client.search({\r\n            index: _this.publicChart[_this.chartType].searchIndex,\r\n            body: {\r\n              \"size\": 0,\r\n              \"sort\": {\r\n                \"@timestamp\": \"desc\"\r\n              },\r\n              \"query\":{\r\n                \"bool\": {\r\n                  \"filter\":[{ \"range\": {\r\n                      \"@timestamp\": {\r\n                        \"from\": _this.fromTime,\r\n                        \"to\": _this.endTime,\r\n                        \"include_lower\": true,\r\n                        \"include_upper\": true\r\n                      }\r\n                    }}],\r\n                  \"must\": [\r\n                    {\r\n                      \"term\": {\r\n                        \"metricset.name\": \"memory\"\r\n                      }\r\n                    },{\r\n                      \"terms\": {\r\n                        \"host.hostname\":nodeArr\r\n                      }\r\n                    }\r\n                  ]\r\n                }\r\n              },\r\n              \"aggs\": {\r\n                \"groupbyhost\":{\r\n                  \"terms\": {\r\n                    \"field\": \"host.hostname\",\r\n                    \"min_doc_count\": 0\r\n                  },\r\n                  \"aggs\": {\r\n                    \"time_histo\": {                  \r\n                      \"date_histogram\": {\r\n                        \"field\": \"@timestamp\",\r\n                        \"interval\": _this.flowTimeInterval,\r\n                        \"extended_bounds\": {\r\n                          \"min\": _this.fromTime,\r\n                          \"max\": _this.endTime\r\n                        }\r\n                      },\r\n                      \"aggs\": {\r\n                        \"total_sum\": {\r\n                          \"avg\": {\r\n                            \"field\": \"system.memory.actual.used.pct\"\r\n                          }\r\n                        },\r\n                        \"difference\": {\r\n                          \"serial_diff\": {                \r\n                            \"buckets_path\": \"total_sum\",\r\n                            \"lag\" : 1\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }).then((res)=>{\r\n            // console.log(res)\r\n            // if(!res.aggregations){//当数据没打到metricbeat上时，可能连aggregations属性都没有，这时只能显示暂无数据，并且给个错误提示\r\n            //   _this.memoryLineChart.clear();\r\n            //   _this.memoryLineNodata=true;\r\n            //   _this.memoryLoading=false;\r\n            //   return false;\r\n            // }\r\n\r\n            var tarResult=res.aggregations?res.aggregations.groupbyhost.buckets:[];\r\n            var legendData=[],seriesData=[];\r\n            if(tarResult.length==0){\r\n              options.xAxis.show=false;\r\n              options.yAxis.show=false;\r\n              _this.memoryLineNodata=true;//暂无数据\r\n            }else{\r\n              options.xAxis.show=true;\r\n              options.yAxis.show=true;\r\n              _this.memoryLineNodata=false;//有数据\r\n            }\r\n            for(var i=0;i<tarResult.length;i++){\r\n              var xaxisData=[],valData=[];\r\n              var dataI=tarResult[i];\r\n              legendData.push(dataI.key);\r\n              for(var j=0;j<dataI.time_histo.buckets.length;j++){\r\n                var dataJ=dataI.time_histo.buckets[j];\r\n                var dataJV=dataJ.total_sum.value;\r\n                if(!dataJV){\r\n                  dataJV=0;\r\n                }\r\n                xaxisData.push(_this.transformMyDate(dataJ.key));\r\n                valData.push(dataJV);\r\n              }\r\n              seriesData.push(\r\n                {\r\n                  name:dataI.key,\r\n                  type:'line',\r\n                  data:valData\r\n                }\r\n              );\r\n            }\r\n\r\n            if(_this.publicChart[_this.chartType].isMemoryAlertLine && _this.publicChart[_this.chartType].isMemoryRunning){\r\n              seriesData=seriesData.map((item)=>{\r\n                item.markLine= {\r\n                  \"symbol\":\"none\",\r\n                  \"silent\": true,\r\n                  \"lineStyle\":{\r\n                    \"type\":'dashed',\r\n                    \"color\":\"#893448\"\r\n                  },\r\n                  \"data\": [{\r\n                    \"yAxis\": _this.publicChart[_this.chartType].memoryConditionData/100,\r\n                    \"label\":{\r\n                      formatter:function(params){\r\n                        return params.value*100+'%'\r\n                      }\r\n                    }\r\n                  }]\r\n                }\r\n                return item;\r\n              })\r\n            }else if(_this.publicChart[_this.chartType].isMemoryAlertLine && !_this.publicChart[_this.chartType].isMemoryRunning){\r\n              options.toolbox.feature.myTool2.icon='image://static/icon/stopBell.png';\r\n            }\r\n\r\n            options.legend.data=legendData;\r\n            options.xAxis.data=xaxisData;\r\n            options.series=seriesData;\r\n            _this.memoryLineChart.setOption(options,true);\r\n            _this.memoryLoading=false;\r\n          });\r\n        })\r\n    },\r\n    drawDiskRootLine(){\r\n      var _this=this;\r\n      _this.diskRootLoading=true;\r\n      _this.diskRootLineChart = echarts.init(document.getElementById('diskRootLineContainer'));\r\n      var options = {\r\n            title: {\r\n              text: '磁盘空间（/）',\r\n              x:'center'\r\n            },\r\n            color:['#93b7e3','#59c4e6','#edafda','#cbb0e3','#3fb1e3'],\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'none'\r\n              },\r\n              formatter: function (params) {\r\n                var str=\"\";\r\n                for(var i=0;i<params.length;i++){\r\n                  str+=params[i].marker+params[i].seriesName+\": \" + params[i].name+\" ( \"+ Math.round(params[i].value*10000)/100+'%'+\" ) \"+'<br />' \r\n                }\r\n                return str;\r\n              }\r\n            },\r\n            toolbox: {\r\n              right:'10',\r\n              top:'10',\r\n              feature: {\r\n                myTool1: {\r\n                  show: !_this.publicChart[_this.chartType].isDiskRootAlertLine,\r\n                  title: _this.$t('lg.alertingtask'),\r\n                  icon: 'image://static/icon/stopBell.png',\r\n                  onclick: function (){\r\n                    _this.alertMark=_this.publicChart[_this.chartType].alertMarkDiskRoot;\r\n                    _this.taskTypeTxt=_this.publicChart[_this.chartType].taskTypeTxtDiskRoot;\r\n                    _this.isShowTimingTask=true;\r\n                  }\r\n                },\r\n                myTool2: {\r\n                  show: _this.publicChart[_this.chartType].isDiskRootAlertLine,\r\n                  title: _this.$t('lg.alertingtask'),\r\n                  icon: 'image://static/icon/startBell.png',\r\n                  onclick: function (){\r\n                    _this.upSingleTaskData(_this.publicChart[_this.chartType].isDiskRootAlertData,_this.publicChart[_this.chartType].alertMarkDiskRoot,_this.publicChart[_this.chartType].taskTypeTxtDiskRoot);\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            legend: {\r\n              type:'scroll',\r\n              itemGap: 5,\r\n              left:'3%',\r\n              right:'5%',\r\n              bottom:'0',\r\n              data:[]\r\n            },\r\n            grid: {\r\n              top:'16%',\r\n              left: '4%',\r\n              right: '5%',\r\n              bottom: '10%',\r\n              containLabel: true\r\n            },\r\n            xAxis: { \r\n              show:false,\r\n              type: 'category',\r\n              data:[]\r\n            },\r\n            yAxis: { \r\n              show:false,\r\n              name:'%',\r\n              axisLabel: {\r\n                formatter: function (val) {\r\n                  return Math.round(val*10000)/100\r\n                }\r\n              }\r\n            },\r\n            series: [\r\n              // {\r\n              //     type: 'line',\r\n              //     name:'Matcha Latte',\r\n              //     data:[41.1, 30.4, 65.1, 53.3,15],\r\n              // },\r\n            ]\r\n          };\r\n\r\n      _this.lineTimer().then((nodes)=>{\r\n        var nodeArr=[];\r\n        for(var n=0;n<nodes.length;n++){\r\n          nodeArr.push(\r\n            nodes[n].key\r\n          )\r\n        }\r\n        client.search({\r\n          index: _this.publicChart[_this.chartType].searchIndex,\r\n          body: {\r\n            \"size\": 0,\r\n            \"sort\": {\r\n              \"@timestamp\": \"desc\"\r\n            },\r\n            \"query\": {\r\n              \"bool\": {\r\n                \"filter\":[\r\n                  {\r\n                    \"range\": {\r\n                      \"@timestamp\": {\r\n                        \"from\": _this.fromTime,\r\n                        \"to\": _this.endTime,\r\n                        \"include_lower\": true,\r\n                        \"include_upper\": true\r\n                      }\r\n                    }\r\n                  }\r\n                ],\r\n                \"must\": [\r\n                  {\r\n                    \"term\": {\r\n                      \"metricset.name\": \"filesystem\"\r\n                    }\r\n                  },\r\n                  {\r\n                    \"bool\": {\r\n                      \"should\": [\r\n                        {\r\n                          \"term\": {\r\n                            \"system.filesystem.mount_point\": \"/\"\r\n                          }\r\n                        }\r\n                      ]\r\n                    }\r\n                  },\r\n                  {\r\n                    \"terms\": {\r\n                      \"host.hostname\":nodeArr\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            },\r\n            \"aggs\": {\r\n              \"groupbyhost\": {\r\n                \"terms\": {\r\n                  \"field\": \"host.hostname\",\r\n                  \"min_doc_count\": 0\r\n                },\r\n                \"aggs\": {\r\n          \r\n          \"groupbymountpoint\": {\r\n                    \"terms\": {\r\n                      \"field\": \"system.filesystem.mount_point\",\r\n                      \"min_doc_count\": 1\r\n                    },\r\n                    \"aggs\": {\r\n                      \"time_histo\": {\r\n                        \"date_histogram\": {\r\n                          \"field\": \"@timestamp\",\r\n                          \"interval\": _this.flowTimeInterval,//_this.timeinterval\r\n                          \"extended_bounds\": {\r\n                            \"min\": _this.fromTime,\r\n                            \"max\": _this.endTime\r\n                          }\r\n                        },\r\n                        \"aggs\": {\r\n                          \"total_sum\": {\r\n                            \"max\": {\r\n                              \"field\": \"system.filesystem.used.pct\"\r\n                            }\r\n                          },\r\n                          \"difference\": {\r\n                            \"serial_diff\": {\r\n                              \"buckets_path\": \"total_sum\",\r\n                              \"lag\": 1\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }).then((res)=>{\r\n          console.log(\"-----\")\r\n           console.log(res);\r\n          const tarResult=res.aggregations?res.aggregations.groupbyhost.buckets:[];\r\n\r\n          let legendData=[],seriesData=[],xaxisData=[];\r\n          if(tarResult[0].groupbymountpoint.buckets.length==0){\r\n            options.xAxis.show=false;\r\n            options.yAxis.show=false;\r\n            _this.diskRootLineNodata=true;//暂无数据\r\n          }else{\r\n            options.xAxis.show=true;\r\n            options.yAxis.show=true;\r\n            _this.diskRootLineNodata=false;//有数据\r\n          }\r\n          tarResult.forEach(ele=>{\r\n            const eleBuckets=ele.groupbymountpoint.buckets;\r\n            eleBuckets.forEach(item=>{\r\n              xaxisData=[];\r\n              let valData=[];\r\n              legendData.push(ele.key+'（'+item.key+'）');\r\n\r\n              const itemBuckets=item.time_histo.buckets;\r\n              itemBuckets.forEach(v=>{\r\n                let sumVal = v.total_sum.value\r\n                if(!sumVal){\r\n                  sumVal=0;\r\n                }\r\n                valData.push(sumVal);\r\n                xaxisData.push(_this.transformMyDate(v.key));\r\n              })\r\n          \r\n              seriesData.push({\r\n                name:ele.key+'（'+item.key+'）',\r\n                type: 'line',\r\n                data:valData,\r\n              })\r\n              \r\n            })\r\n          })\r\n\r\n          if(_this.publicChart[_this.chartType].isDiskRootAlertLine && _this.publicChart[_this.chartType].isDiskRootRunning){\r\n            seriesData=seriesData.map((item)=>{\r\n              item.markLine= {\r\n                symbol:\"none\",\r\n                silent: true,\r\n                lineStyle:{\r\n                  type:'dashed',\r\n                  color:'#893448'\r\n                },\r\n                data: [{\r\n                  yAxis: _this.publicChart[_this.chartType].diskRootConditionData/100,\r\n                  \"label\":{\r\n                    formatter:function(params){\r\n                      return params.value*100+'%'\r\n                    }\r\n                  }\r\n                }]\r\n              }\r\n              return item;\r\n            })\r\n          }else if(_this.publicChart[_this.chartType].isDiskRootAlertLine && !_this.publicChart[_this.chartType].isDiskRootRunning){\r\n            options.toolbox.feature.myTool2.icon='image://static/icon/stopBell.png';\r\n          }\r\n          // console.log(legendData)\r\n          // console.log(xaxisData)\r\n          // console.log(seriesData)\r\n          // console.log(options)\r\n          options.legend.data=legendData;\r\n          options.xAxis.data=xaxisData;\r\n          options.series=seriesData;\r\n          _this.diskRootLineChart.setOption(options,true);\r\n          _this.diskRootLoading=false;\r\n        });\r\n      })\r\n    },\r\n    drawDiskRoot01Line(){\r\n      var _this=this;\r\n      _this.diskRoot01Loading=true;\r\n      _this.diskRoot01LineChart = echarts.init(document.getElementById('diskRoot01LineContainer'));\r\n      var options = {\r\n            title: {\r\n              text: '磁盘空间（/home）',\r\n              x:'center'\r\n            },\r\n            color:['#cda819','#0098d9','#2b821d','#005eaa','#339ca8'],\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'none'\r\n              },\r\n              formatter: function (params) {\r\n                var str=\"\";\r\n                for(var i=0;i<params.length;i++){\r\n                  str+=params[i].marker+params[i].seriesName+\": \" + params[i].name+\" ( \"+ Math.round(params[i].value*10000)/100+'%'+\" ) \"+'<br />' \r\n                }\r\n                return str;\r\n              }\r\n            },\r\n            toolbox: {\r\n              right:'10',\r\n              top:'10',\r\n              feature: {\r\n                myTool1: {\r\n                  show: !_this.publicChart[_this.chartType].isDiskRoot01AlertLine,\r\n                  title: _this.$t('lg.alertingtask'),\r\n                  icon: 'image://static/icon/stopBell.png',\r\n                  onclick: function (){\r\n                    _this.alertMark=_this.publicChart[_this.chartType].alertMarkDiskRoot01;\r\n                    _this.taskTypeTxt=_this.publicChart[_this.chartType].taskTypeTxtDiskRoot01;\r\n                    _this.isShowTimingTask=true;\r\n                  }\r\n                },\r\n                myTool2: {\r\n                  show: _this.publicChart[_this.chartType].isDiskRoot01AlertLine,\r\n                  title: _this.$t('lg.alertingtask'),\r\n                  icon: 'image://static/icon/startBell.png',\r\n                  onclick: function (){\r\n                    _this.upSingleTaskData(_this.publicChart[_this.chartType].isDiskRoot01AlertData,_this.publicChart[_this.chartType].alertMarkDiskRoot01,_this.publicChart[_this.chartType].taskTypeTxtDiskRoot01);\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            legend: {\r\n              type:'scroll',\r\n              itemGap: 5,\r\n              left:'3%',\r\n              right:'5%',\r\n              bottom:'0',\r\n              data:[]\r\n            },\r\n            grid: {\r\n              top:'16%',\r\n              left: '4%',\r\n              right: '5%',\r\n              bottom: '10%',\r\n              containLabel: true\r\n            },\r\n            xAxis: { \r\n              show:false,\r\n              type: 'category',\r\n              data:[]\r\n            },\r\n            yAxis: { \r\n              show:false,\r\n              name:'%',\r\n              axisLabel: {\r\n                formatter: function (val) {\r\n                  return Math.round(val*10000)/100\r\n                }\r\n              }\r\n            },\r\n            series: [\r\n              // {\r\n              //     type: 'line',\r\n              //     name:'Matcha Latte',\r\n              //     data:[41.1, 30.4, 65.1, 53.3,15],\r\n              // },\r\n            ]\r\n          };\r\n\r\n        _this.lineTimer().then((nodes)=>{\r\n          var nodeArr=[];\r\n          for(var n=0;n<nodes.length;n++){\r\n            nodeArr.push(\r\n              nodes[n].key\r\n            )\r\n          }\r\n          client.search({\r\n            index: _this.publicChart[_this.chartType].searchIndex,\r\n            body: {\r\n              \"size\": 0,\r\n              \"sort\": {\r\n                \"@timestamp\": \"desc\"\r\n              },\r\n              \"query\": {\r\n                \"bool\": {\r\n                  \"filter\":[\r\n                    {\r\n                      \"range\": {\r\n                        \"@timestamp\": {\r\n                          \"from\": _this.fromTime,\r\n                          \"to\": _this.endTime,\r\n                          \"include_lower\": true,\r\n                          \"include_upper\": true\r\n                        }\r\n                      }\r\n                    }\r\n                  ],\r\n                  \"must\": [\r\n                    {\r\n                      \"term\": {\r\n                        \"metricset.name\": \"filesystem\"\r\n                      }\r\n                    },\r\n                    {\r\n                      \"bool\": {\r\n                        \"should\": [\r\n                          {\r\n                            \"term\": {\r\n                              \"system.filesystem.mount_point\": \"/home\"\r\n                            }\r\n                          }\r\n                        ]\r\n                      }\r\n                    },\r\n                    {\r\n                      \"terms\": {\r\n                        \"host.hostname\":nodeArr\r\n                      }\r\n                    }\r\n                  ]\r\n                }\r\n              },\r\n            \"aggs\": {\r\n              \"groupbyhost\": {\r\n                \"terms\": {\r\n                  \"field\": \"host.hostname\",\r\n                  \"min_doc_count\": 0\r\n                },\r\n                \"aggs\": {\r\n                  \"groupbymountpoint\": {\r\n                    \"terms\": {\r\n                      \"field\": \"system.filesystem.mount_point\",\r\n                      \"min_doc_count\": 1\r\n                    },\r\n                    \"aggs\": {\r\n                      \"time_histo\": {\r\n                        \"date_histogram\": {\r\n                          \"field\": \"@timestamp\",\r\n                          \"interval\": _this.flowTimeInterval,\r\n                          \"extended_bounds\": {\r\n                            \"min\": _this.fromTime,\r\n                            \"max\": _this.endTime\r\n                          }\r\n                        },\r\n                        \"aggs\": {\r\n                          \"total_sum\": {\r\n                            \"max\": {\r\n                              \"field\": \"system.filesystem.used.pct\"\r\n                            }\r\n                          },\r\n                          \"difference\": {\r\n                            \"serial_diff\": {\r\n                              \"buckets_path\": \"total_sum\",\r\n                              \"lag\": 1\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }).then((res)=>{\r\n          console.log(\">>>>>>>\")\r\n           console.log(res);\r\n          // if(!res.aggregations){//当数据没打到metricbeat上时，可能连aggregations属性都没有，这时只能显示暂无数据\r\n          //   _this.diskRoot01LineChart.clear();\r\n          //   _this.diskRoot01LineNodata=true;\r\n          //   _this.diskRoot01Loading=false;\r\n          //   return false;\r\n          // }\r\n          const tarResult=res.aggregations?res.aggregations.groupbyhost.buckets:[];\r\n          let legendData=[],seriesData=[],xaxisData=[];\r\n          if(tarResult[0].groupbymountpoint.buckets.length==0){\r\n            options.xAxis.show=false;\r\n            options.yAxis.show=false;\r\n            _this.diskRoot01LineNodata=true;//暂无数据\r\n          }else{\r\n            options.xAxis.show=true;\r\n            options.yAxis.show=true;\r\n            _this.diskRoot01LineNodata=false;//有数据\r\n          }\r\n          tarResult.forEach(ele=>{\r\n            const eleBuckets=ele.groupbymountpoint.buckets;\r\n            eleBuckets.forEach(item=>{\r\n              xaxisData=[];\r\n              let valData=[];\r\n              legendData.push(ele.key+'（'+item.key+'）');\r\n\r\n              const itemBuckets=item.time_histo.buckets;\r\n              itemBuckets.forEach(v=>{\r\n                let sumVal = v.total_sum.value\r\n                if(!sumVal){\r\n                  sumVal=0;\r\n                }\r\n                valData.push(sumVal);\r\n                xaxisData.push(_this.transformMyDate(v.key));\r\n              })\r\n           \r\n              seriesData.push({\r\n                name:ele.key+'（'+item.key+'）',\r\n                type: 'line',\r\n                data:valData,\r\n              })\r\n           \r\n            })\r\n          })\r\n\r\n          if(_this.publicChart[_this.chartType].isDiskRoot01AlertLine && _this.publicChart[_this.chartType].isDiskRoot01Running){\r\n            seriesData=seriesData.map((item)=>{\r\n              item.markLine= {\r\n                symbol:\"none\",\r\n                silent: true,\r\n                lineStyle:{\r\n                  type:'dashed',\r\n                  color:'#893448'\r\n                },\r\n                data: [{\r\n                  yAxis: _this.publicChart[_this.chartType].diskRoot01ConditionData/100,\r\n                  \"label\":{\r\n                    formatter:function(params){\r\n                      return params.value*100+'%'\r\n                    }\r\n                  }\r\n                }]\r\n              }\r\n              return item;\r\n            })\r\n          }else if(_this.publicChart[_this.chartType].isDiskRoot01AlertLine && !_this.publicChart[_this.chartType].isDiskRoot01Running){\r\n            options.toolbox.feature.myTool2.icon='image://static/icon/stopBell.png';\r\n          }\r\n\r\n          // console.log(legendData)\r\n          // console.log(xaxisData)\r\n          // console.log(seriesData)\r\n          // console.log(options)\r\n          options.legend.data=legendData;\r\n          options.xAxis.data=xaxisData;\r\n          options.series=seriesData;\r\n          _this.diskRoot01LineChart.setOption(options,true);\r\n          _this.diskRoot01Loading=false;\r\n        });\r\n      })\r\n    },\r\n    //.end\r\n    //.start shadow独有图表\r\n    line3(){\r\n      var _this=this;\r\n      _this.tcpLoading=true;\r\n      _this.myChart3 = echarts.init(document.getElementById('myLine3'));\r\n      \r\n      var options = {\r\n            color:['#893448','#e6b600','#27727b','#fcce10','#e87c25','#60c0dd'],\r\n            title: {\r\n              text: 'TCP',\r\n              x:'center'\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              formatter: function (params) {\r\n                var str=\"\";\r\n                for(var i=0;i<params.length;i++){\r\n                  str+=params[i].marker+params[i].seriesName+\": \" + params[i].name+\"   ( \"+ params[i].value+\" ) \"+'<br />' \r\n                }\r\n                return str;\r\n              },\r\n            },\r\n            legend: {\r\n              type:'scroll',\r\n              itemGap: 5,\r\n              left:'3%',\r\n              right:'5%',\r\n              bottom:'0',\r\n              data:[]\r\n            },\r\n            grid: {\r\n              top:'16%',\r\n              left: '4%',\r\n              right: '5%',\r\n              bottom: '10%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              show:false,\r\n              type: 'category',\r\n              //data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n              data: []\r\n            },\r\n            yAxis: {\r\n              show:false,\r\n              type : 'value',\r\n              name:'次',\r\n              // minInterval: 1,//保持y轴刻度只为整数\r\n              scale:true,\r\n              axisLabel : {\r\n                formatter: '{value}'\r\n              }\r\n            },\r\n            series: []\r\n          };\r\n     \r\n      _this.lineTimer().then((nodes)=>{\r\n        var nodeArr=[];\r\n        for(var n=0;n<nodes.length;n++){\r\n          nodeArr.push(\r\n            nodes[n].key\r\n          )\r\n        }\r\n        client.search({\r\n          index: \"shadow-metricbeat*\",\r\n          body: {\r\n            \"size\": 0,\r\n            \"sort\": {\r\n              \"@timestamp\": \"desc\"\r\n            },\r\n            \"query\":{\r\n              \"bool\": {\r\n                \"filter\":[\r\n                    { \r\n                    \"range\": {\r\n                      \"@timestamp\": {\r\n                        \"from\": _this.fromTime,\r\n                        \"to\": _this.endTime,\r\n                        \"include_lower\": true,\r\n                        \"include_upper\": true\r\n                      }\r\n                    }\r\n                  }\r\n                ],\r\n                \"must\": [\r\n                  {\r\n                    \"term\": {\r\n                      \"metricset.name\": \"socket\"\r\n                    }\r\n                  },\r\n                  {\r\n                    \"terms\": {\r\n                      \"host.hostname\": nodeArr\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            },\r\n            \"aggs\": {\r\n              \"groupbyhost\": {\r\n                \"terms\": {\r\n                  \"field\": \"host.hostname\",\r\n                  \"min_doc_count\": 0\r\n                },\r\n                \"aggs\": {\r\n                  \"time_histo\": {                  \r\n                    \"date_histogram\": {\r\n                      \"field\": \"@timestamp\",\r\n                      \"interval\": _this.flowTimeInterval,\r\n                      \"extended_bounds\": {\r\n                        \"min\": _this.fromTime,\r\n                        \"max\": _this.endTime\r\n                      }\r\n                    },\r\n                    \"aggs\": {\r\n                      \"total_sum\": {\r\n                        \"cardinality\": {\r\n                          \"field\": \"process.pid\"\r\n                        }\r\n                      },\r\n                      \"difference\": {\r\n                        \"serial_diff\": {                \r\n                          \"buckets_path\": \"total_sum\",\r\n                          \"lag\" : 1\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }).then((res)=>{\r\n          var tarResult=res.aggregations?res.aggregations.groupbyhost.buckets:[];\r\n          var legendData=[],seriesData=[];\r\n          if(tarResult.length==0){\r\n            options.xAxis.show=false;\r\n            options.yAxis.show=false;\r\n            _this.line3Nodata=true;//暂无数据\r\n          }else{\r\n            options.xAxis.show=true;\r\n            options.yAxis.show=true;\r\n            _this.line3Nodata=false;//有数据\r\n          }\r\n          for(var i=0;i<tarResult.length;i++){\r\n            var xaxisData=[],valData=[];\r\n            var dataI=tarResult[i];\r\n            legendData.push(dataI.key);\r\n            for(var j=0;j<dataI.time_histo.buckets.length;j++){\r\n              var dataJ=dataI.time_histo.buckets[j];\r\n              var dataJV=dataJ.total_sum.value;\r\n              if(!dataJV){\r\n                dataJV=0\r\n              }\r\n              xaxisData.push(_this.transformMyDate(dataJ.key));\r\n              valData.push(dataJV);\r\n            }\r\n            seriesData.push(\r\n              {\r\n                name:dataI.key,\r\n                type:'line',\r\n                data:valData\r\n              }\r\n            );\r\n          }\r\n\r\n          options.legend.data=legendData;\r\n          options.xAxis.data=xaxisData;\r\n          options.series=seriesData;\r\n          _this.myChart3.setOption(options,true);\r\n          _this.tcpLoading=false;\r\n        });\r\n      })\r\n    },\r\n    line4(){//http请求数\r\n      var _this=this;\r\n      _this.httprequestLoading=true;\r\n      _this.myChart4 = echarts.init(document.getElementById('myLine4'));\r\n      \r\n      var options = {\r\n            color:['#7cb4cc','#61a0a8','#e098c7','#9b8bba','#8fd3e8'],\r\n            title: {\r\n              text: _this.$t('lg.httprequests'),\r\n              x:'center'\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              formatter: function (params) {\r\n                var str=\"\";\r\n                for(var i=0;i<params.length;i++){\r\n                  str+=params[i].marker+params[i].seriesName+\": \" + params[i].name+\"   ( \"+ params[i].value+\" ) \"+'<br />' \r\n                }\r\n                return str;\r\n              }\r\n            },\r\n            legend: {\r\n              type:'scroll',\r\n              itemGap: 5,\r\n              left:'3%',\r\n              right:'5%',\r\n              bottom:'0',\r\n              data:[]\r\n            },\r\n            grid: {\r\n              top:'16%',\r\n              left: '4%',\r\n              right: '5%',\r\n              bottom: '10%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              show:false,\r\n              type: 'category',\r\n              data: []\r\n            },\r\n            yAxis: {\r\n              show:false,\r\n              type: 'value',\r\n              name:'次/秒',\r\n              // minInterval: 1,//保持y轴刻度只为整数\r\n            },\r\n            series: []\r\n        };\r\n \r\n      _this.lineTimer().then((nodes)=>{\r\n        var nodeArr=[];\r\n        for(var n=0;n<nodes.length;n++){\r\n          nodeArr.push(\r\n            nodes[n].key\r\n          )\r\n        }\r\n        client.search({\r\n          index: \"shadow-filebeat*\",\r\n          body: {\r\n            \"size\": 0,\r\n            \"sort\": {\r\n              \"@timestamp\": \"desc\"\r\n            },\r\n            \"query\":{\r\n              \"bool\": {\r\n                \"filter\":[\r\n                  {\r\n                    \"range\": {\r\n                      \"@timestamp\": {\r\n                        \"gte\": _this.fromTime,\r\n                        \"lte\": _this.endTime\r\n                      }\r\n                    }\r\n                  }\r\n                ],\r\n                \"must\": [\r\n                  {\r\n                    \"term\": {\r\n                      \"log.file.path\": \"/usr/local/shadow/logs/access.log\"\r\n                    }\r\n                  },\r\n                  {\r\n                    \"terms\": {\r\n                      \"host.hostname\":nodeArr\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            },\r\n            \"aggs\": {\r\n              \"groupbyhost\":{\r\n                \"terms\": {\r\n                  \"field\": \"host.hostname\",\r\n                  \"min_doc_count\": 0\r\n                },\r\n                \"aggs\": {\r\n                  \"time_histo\": {                  \r\n                    \"date_histogram\": {\r\n                      \"field\": \"@timestamp\",\r\n                      \"interval\": _this.flowTimeInterval,\r\n                      \"extended_bounds\": {\r\n                        \"min\": _this.fromTime,\r\n                        \"max\": _this.endTime\r\n                      }\r\n                    }\r\n                  }        \r\n                }\r\n              }\r\n            }\r\n          }\r\n        }).then((res)=>{\r\n          // console.log(res)\r\n          var tarResult=res.aggregations?res.aggregations.groupbyhost.buckets:[];\r\n          var legendData=[],seriesData=[];\r\n          if(tarResult.length==0){\r\n            options.xAxis.show=false;\r\n            options.yAxis.show=false;\r\n            _this.line4Nodata=true;//暂无数据\r\n          }else{\r\n            options.xAxis.show=true;\r\n            options.yAxis.show=true;\r\n            _this.line4Nodata=false;//有数据\r\n          }\r\n          for(var i=0;i<tarResult.length;i++){\r\n            var xaxisData=[],valData=[];\r\n            var dataI=tarResult[i];\r\n            legendData.push(dataI.key);\r\n            for(var j=0;j<dataI.time_histo.buckets.length;j++){\r\n              var dataJ=dataI.time_histo.buckets[j];\r\n              xaxisData.push(_this.transformMyDate(dataJ.key));\r\n              valData.push(Math.floor(dataJ.doc_count/10));\r\n            }\r\n            seriesData.push(\r\n              {\r\n                name:dataI.key,\r\n                type:'line',\r\n                data:valData\r\n              }\r\n            );\r\n          }\r\n\r\n          options.legend.data=legendData;\r\n          options.xAxis.data=xaxisData;\r\n          options.series=seriesData;\r\n          _this.myChart4.setOption(options,true);\r\n          _this.httprequestLoading=false;\r\n        });\r\n      })\r\n    },\r\n    line5(){//流量\r\n      var _this=this;\r\n      _this.networkLoading=true;\r\n      _this.myChart5 = echarts.init(document.getElementById('myLine5'));\r\n      var options = {\r\n            color:['#008acd','#b6a2de','#2ec7c9','#ffb980','#d87a80','#8d98b3','#97b552','#95706d','#dc69aa','#c05050'],\r\n            title: {\r\n              text: _this.$t('lg.network'),\r\n              x:'center'\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis'\r\n            },\r\n            toolbox: { //流量图表报警暂时弃用\r\n              right:'10',\r\n              top:'10',\r\n              feature: {\r\n                myTool1: {\r\n                  show: true,\r\n                  title: \"对比\",\r\n                  icon: 'image://static/icon/search.png',\r\n                  onclick: function (){\r\n                  //  _this.alertMark=\"networkMax\";\r\n                   // _this.taskTypeTxt=_this.$t('lg.networkbased');\r\n                    _this.networkcpShow=true;\r\n                  }\r\n                },\r\n                // myTool2: {\r\n                //   show: _this.isNetworkAlertLine,\r\n                //   title: _this.$t('lg.alertingtask'),\r\n                //   icon: 'image://static/icon/startBell.png',\r\n                //   onclick: function (){\r\n                //     _this.upSingleTaskData(_this.isNetworkAlertData,'networkMax',_this.$t('lg.networkbased'));\r\n                //   }\r\n                // }\r\n              }\r\n            },\r\n            legend: {\r\n              type:'scroll',\r\n              itemGap: 5,\r\n              left:'3%',\r\n              right:'5%',\r\n              bottom:'0',\r\n              data:[]\r\n            },\r\n            grid: {\r\n              top:'16%',\r\n              left: '4%',\r\n              right: '5%',\r\n              bottom: '10%',\r\n              containLabel: true\r\n            },\r\n            xAxis: {\r\n              show:false,\r\n              type: 'category',\r\n              data: []\r\n            },\r\n            yAxis: {\r\n              show:false,\r\n              type: 'value',\r\n              name:'M/秒',\r\n            },\r\n            series: []\r\n          };\r\n          \r\n      function lineTimerFn(){\r\n        client.search({\r\n          index: \"shadow-metricbeat*\",\r\n          body:{\r\n            \"size\": 0,\r\n            \"sort\": {\r\n              \"@timestamp\": \"desc\"\r\n            },\r\n            \"query\": {\r\n              \"bool\": {\r\n                \"filter\":[\r\n                  {\r\n                    \"range\": {\r\n                      \"@timestamp\": {\r\n                        \"from\": _this.fromTime,\r\n                        \"to\": _this.endTime,\r\n                        \"include_lower\": true,\r\n                        \"include_upper\": true\r\n                      }\r\n                    }\r\n                  }\r\n                ],\r\n                \"must\": [\r\n                  {\r\n                    \"term\": {\r\n                      \"metricset.name\": \"network\"\r\n                    }\r\n                  }//,\r\n                  // {\r\n                  //   \"term\": {\r\n                  //     \"system.network.name\": \"eth0\"\r\n                  //     }\r\n                  //   }\r\n                ]\r\n              }\r\n            },\r\n            \"aggs\":{\r\n              \"groupByHost\":{\r\n                \"terms\": {\r\n                  \"field\": \"host.hostname\"\r\n                },\r\n                \"aggs\": {\r\n                  \"time_histo\": {\r\n                    \"date_histogram\": {\r\n                      \"field\": \"@timestamp\",\r\n                      \"interval\": _this.flowTimeInterval\r\n                    },\r\n                    \"aggs\": {\r\n                      \"in_sum\": {\r\n                        \"avg\": {\r\n                          \"field\": \"system.network.in.bytes\"\r\n                        }\r\n                      },\r\n                      \"out_sum\": {\r\n                        \"avg\": {\r\n                          \"field\": \"system.network.out.bytes\"\r\n                        }\r\n                      },\r\n                      \"total_sum\": {\r\n                        \"bucket_script\": {\r\n                          \"buckets_path\": {\r\n                            \"in_sum\": \"in_sum\",\r\n                            \"out_sum\": \"out_sum\"\r\n                          },\r\n                          \"script\": \"params.in_sum+params.out_sum\"\r\n                        }\r\n                      },\r\n                      \"difference\": {\r\n                        \"serial_diff\": {\r\n                          \"buckets_path\": \"total_sum\",\r\n                          \"lag\": 1\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }).then((res)=>{\r\n          // console.log(res);\r\n          var tarResult=res.aggregations?res.aggregations.groupByHost.buckets:[];\r\n          var legendData=[],sumLegendData=[],\r\n              seriesData=[],sumSeriesData=[];\r\n          if(tarResult.length==0){\r\n            options.xAxis.show=false;\r\n            options.yAxis.show=false;\r\n            _this.line5Nodata=true;//暂无数据\r\n          }else{\r\n            options.xAxis.show=true;\r\n            options.yAxis.show=true;\r\n            _this.line5Nodata=false;//有数据\r\n          }\r\n          for(var i=0;i<tarResult.length;i++){\r\n            var xaxisData=[],valData=[];\r\n            var dataI=tarResult[i];\r\n            legendData.push(dataI.key);\r\n            for(var j=0;j<dataI.time_histo.buckets.length;j++){\r\n              var dataJ=dataI.time_histo.buckets[j];\r\n              // xaxisData.push(_this.transformMyDate(dataJ.key));\r\n              // valData.push(dataJ.doc_count);\r\n              if(dataJ.difference){\r\n                xaxisData.push(_this.transformMyDate(dataJ.key));\r\n                var Mdifference = Math.floor(dataJ.difference.value/1024/1024)/10\r\n                valData.push(Mdifference);\r\n              }\r\n            }\r\n            // console.log(valData)\r\n            seriesData.push(\r\n              {\r\n                name:dataI.key,\r\n                type:'line',\r\n                data:valData\r\n              }\r\n            );\r\n          }\r\n\r\n          //流量图表报警暂时弃用\r\n          // if(_this.isNetworkAlertLine && _this.isNetworkRunning){\r\n          //   seriesData=seriesData.map((item)=>{\r\n          //     item.markLine= {\r\n          //       symbol:\"none\",\r\n          //       silent: true,\r\n          //       lineStyle:{\r\n          //           type:'dashed',\r\n          //           color:'#893448'\r\n          //       },\r\n          //       data: [{\r\n          //         yAxis: _this.networkConditionData,\r\n          //         \"label\":{\r\n          //           formatter:function(params){\r\n          //             return params.value+'M'\r\n          //           }\r\n          //         }\r\n          //       }]\r\n          //     }\r\n          //     return item;\r\n          //   })\r\n          // }else if(_this.isNetworkAlertLine && !_this.isNetworkRunning){\r\n          //   options.toolbox.feature.myTool2.icon='image://static/icon/stopBell.png';\r\n          // }\r\n\r\n          options.legend.data=legendData;\r\n          options.xAxis.data=xaxisData;\r\n          options.series=seriesData;\r\n          _this.myChart5.setOption(options,true);\r\n          _this.networkLoading=false;\r\n        });\r\n      }\r\n      lineTimerFn();\r\n    },\r\n    //.end \r\n    transformMyDate(d){\r\n      d=new Date(d);\r\n      function pad(n){\r\n        return n<10 ? '0'+n : n\r\n      }\r\n      return pad(parseInt(d.getMonth())+1)+\"-\"+pad(d.getDate())+\" \"+pad(d.getHours())+':'+ pad(d.getMinutes())+':' + pad(d.getSeconds());\r\n    },\r\n    // transformMyDate2(d){\r\n    //   d=new Date(d-8*60*60*1000);\r\n    //   function pad(n){\r\n    //     return n<10 ? '0'+n : n\r\n    //   }\r\n    //   return pad(parseInt(d.getMonth())+1)+\"-\"+pad(d.getDate())+\" \"+pad(d.getHours())+':'+ pad(d.getMinutes());\r\n    // }\r\n    handleTime(){\r\n      var _this=this;\r\n      var sttime=_this.$store.state.mydatedata.starttime,\r\n          edtime=_this.$store.state.mydatedata.endtime;\r\n      var fromTime2=toISO8601(sttime),\r\n          endTime2=toISO8601(edtime);\r\n      var fromTime=fromTime2 || toISO8601(new Date(Date.now()-_this.$store.state.dateTimeLong)),\r\n          endTime=endTime2 || toISO8601(new Date()); \r\n      _this.fromTime=fromTime;\r\n      _this.endTime=endTime;\r\n      _this.timeinterval=_this.$store.state.mydatedata.interval || '5m';\r\n      _this.flowTimeInterval=_this.$store.state.mydatedata.flowInterval || '600s';\r\n    },\r\n    getTimingTask(taskType){//获取 邮件报警任务\r\n      let _this=this;\r\n      var url = SERVER_API_URL + \"monitoring/scheduling/tasks\";\r\n      _this.editTaskId=null;\r\n      return new Promise((resolve,reject)=>{\r\n        axios.get(url).then((res)=>{\r\n          let data=res.data.data;\r\n          data.forEach((item,index)=>{\r\n            // console.log(item)\r\n            if(item.params){\r\n              if(item.params.alertmark=='cpuMax' || item.params.alertmark=='memoryMax' || item.params.alertmark=='networkMax' || item.params.alertmark=='diskRootMax' || item.params.alertmark=='diskRoot01Max' || item.params.alertmark=='cpu_cmMax' || item.params.alertmark=='memory_cmMax' || item.params.alertmark=='diskRoot_cmMax' || item.params.alertmark=='diskRoot01_cmMax' ){\r\n                var editItem = data[index];\r\n                editItem.rate = editItem.frequency.match(/(\\d*)(\\w*)/)[1];\r\n                editItem.rateUnitValue = editItem.frequency.match(/(\\d*)(\\w*)/)[2];\r\n                switch(editItem.rateUnitValue)\r\n                {\r\n                  case \"h\":\r\n                  editItem.rateUnitValueTxt=_this.$t('lg.hour');\r\n                  break;\r\n                  case \"d\":\r\n                  editItem.rateUnitValueTxt=_this.$t('lg.day');\r\n                  break;\r\n                  case \"w\":\r\n                  editItem.rateUnitValueTxt=_this.$t('lg.week');\r\n                  break;\r\n                  default:\r\n                  editItem.rateUnitValueTxt=_this.$t('lg.year');\r\n                };\r\n\r\n                editItem.params.timeInterval = editItem.params.interval.match(/(\\d*)(\\w*)/)[1];\r\n                editItem.params.intervalUnitVal = editItem.params.interval.match(/(\\d*)(\\w*)/)[2];\r\n                switch(editItem.params.intervalUnitVal)\r\n                { \r\n                  case \"m\":\r\n                  editItem.params.intervalUnitValTxt=_this.$t('lg.minite');\r\n                  case \"h\":\r\n                  editItem.params.intervalUnitValTxt=_this.$t('lg.hour');\r\n                  break;\r\n                  default:\r\n                  editItem.params.intervalUnitValTxt=_this.$t('lg.day');\r\n                };\r\n\r\n                if(item.params.alertmark=='cpuMax'){\r\n                  if(item.status=='running'){\r\n                    _this.publicChart['shadow'].isCpuRunning = true;\r\n                    if(taskType == 'cpuMax'){\r\n                      _this.isRunning=true;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }else{\r\n                    _this.publicChart['shadow'].isCpuRunning = false;\r\n                    if(taskType == 'cpuMax'){\r\n                      _this.isRunning=false;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }\r\n                  _this.publicChart['shadow'].isCpuAlertLine=true;\r\n                  _this.publicChart['shadow'].isCpuAlertData=editItem;\r\n                  _this.publicChart['shadow'].cpuConditionData=editItem.params.monThreshold.replace('%','');\r\n                  \r\n                }else if(item.params.alertmark=='memoryMax'){\r\n                  if(item.status=='running'){\r\n                    _this.publicChart['shadow'].isMemoryRunning = true;\r\n                    if(taskType == 'memoryMax'){\r\n                      _this.isRunning=true;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }else{\r\n                    _this.publicChart['shadow'].isMemoryRunning = false;\r\n                    if(taskType == 'memoryMax'){\r\n                      _this.isRunning=false;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }\r\n                  _this.publicChart['shadow'].isMemoryAlertLine=true;\r\n                  _this.publicChart['shadow'].isMemoryAlertData=editItem;\r\n                  _this.publicChart['shadow'].memoryConditionData=editItem.params.monThreshold.replace('%','');\r\n                \r\n                }else if(item.params.alertmark=='networkMax'){\r\n\r\n                  if(item.status=='running'){\r\n                    _this.isNetworkRunning = true;\r\n                    if(taskType == 'networkMax'){\r\n                      _this.isRunning=true;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }else{\r\n                    _this.isNetworkRunning = false;\r\n                    if(taskType == 'networkMax'){\r\n                      _this.isRunning=false;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }\r\n                  _this.isNetworkAlertLine=true;\r\n                  _this.isNetworkAlertData=editItem;\r\n                  _this.networkConditionData=_this.isNetworkAlertData.params.monThreshold.replace('M','');\r\n                }else if(item.params.alertmark=='diskRootMax'){\r\n                 \r\n                  if(item.status=='running'){\r\n                    _this.publicChart['shadow'].isDiskRootRunning = true;\r\n                    if(taskType == 'diskRootMax'){\r\n                      _this.isRunning=true;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }else{\r\n                    _this.publicChart['shadow'].isDiskRootRunning = false;\r\n                    if(taskType == 'diskRootMax'){\r\n                      _this.isRunning=false;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }\r\n\r\n                  _this.publicChart['shadow'].isDiskRootAlertLine=true;\r\n                  _this.publicChart['shadow'].isDiskRootAlertData=editItem;\r\n                  _this.publicChart['shadow'].diskRootConditionData=editItem.params.monThreshold.replace('%','');\r\n\r\n                }else if(item.params.alertmark=='diskRoot01Max'){\r\n                  \r\n                  if(item.status=='running'){\r\n                    _this.publicChart['shadow'].isDiskRoot01Running = true;\r\n                    if(taskType == 'diskRoot01Max'){\r\n                      _this.isRunning=true;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }else{\r\n                    _this.publicChart['shadow'].isDiskRoot01Running = false;\r\n                    if(taskType == 'diskRoot01Max'){\r\n                      _this.isRunning=false;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }\r\n\r\n                  _this.publicChart['shadow'].isDiskRoot01AlertLine=true;\r\n                  _this.publicChart['shadow'].isDiskRoot01AlertData=editItem;\r\n                  _this.publicChart['shadow'].diskRoot01ConditionData=editItem.params.monThreshold.replace('%','');\r\n\r\n                }else if(item.params.alertmark=='cpu_cmMax'){//cm\r\n                  if(item.status=='running'){\r\n                    _this.publicChart['cm'].isCpuRunning = true;  \r\n                   \r\n                    if(taskType == 'cpu_cmMax'){\r\n                      _this.isRunning=true;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }else{\r\n                    _this.publicChart['cm'].isCpuRunning = false;  \r\n                    if(taskType == 'cpu_cmMax'){\r\n                      _this.isRunning=false;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }\r\n                  _this.publicChart['cm'].isCpuAlertLine=true;\r\n                  _this.publicChart['cm'].isCpuAlertData=editItem;\r\n                  _this.publicChart['cm'].cpuConditionData=editItem.params.monThreshold.replace('%','');\r\n                }else if(item.params.alertmark=='memory_cmMax'){\r\n                  if(item.status=='running'){\r\n                    _this.publicChart['cm'].isMemoryRunning = true;\r\n                    if(taskType == 'memory_cmMax'){\r\n                      _this.isRunning=true;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }else{\r\n                    _this.publicChart['cm'].isMemoryRunning = false;\r\n                    if(taskType == 'memory_cmMax'){\r\n                      _this.isRunning=false;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }\r\n                  _this.publicChart['cm'].isMemoryAlertLine=true;\r\n                  _this.publicChart['cm'].isMemoryAlertData=editItem;\r\n                  _this.publicChart['cm'].memoryConditionData=editItem.params.monThreshold.replace('%','');\r\n                }else if(item.params.alertmark=='diskRoot_cmMax'){\r\n                  if(item.status=='running'){\r\n                    _this.publicChart['cm'].isDiskRootRunning = true;\r\n                    if(item.params.alertmark=='diskRoot_cmMax'){\r\n                      _this.isRunning=true;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }else{\r\n                    _this.publicChart['cm'].isDiskRootRunning = false;\r\n                    if(item.params.alertmark=='diskRoot_cmMax'){\r\n                      _this.isRunning=false;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }\r\n\r\n                  _this.publicChart['cm'].isDiskRootAlertLine=true;\r\n                  _this.publicChart['cm'].isDiskRootAlertData=editItem;\r\n                  _this.publicChart['cm'].diskRootConditionData=editItem.params.monThreshold.replace('%','');\r\n                }else if(item.params.alertmark=='diskRoot01_cmMax'){\r\n                  if(item.status=='running'){\r\n                    _this.publicChart['cm'].isDiskRoot01Running = true;\r\n                    if(item.params.alertmark=='diskRoot01_cmMax'){\r\n                      _this.isRunning=true;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }else{\r\n                    _this.publicChart['cm'].isDiskRoot01Running = false;\r\n                    if(item.params.alertmark=='diskRoot01_cmMax'){\r\n                      _this.isRunning=false;\r\n                      _this.editTaskId=editItem.id;\r\n                    }\r\n                  }\r\n\r\n                  _this.publicChart['cm'].isDiskRoot01AlertLine=true;\r\n                  _this.publicChart['cm'].isDiskRoot01AlertData=editItem;\r\n                  _this.publicChart['cm'].diskRoot01ConditionData=editItem.params.monThreshold.replace('%','');\r\n                }     \r\n              }\r\n            }\r\n          });\r\n          resolve({\r\n            cpuline:_this.isCpuAlertLine,\r\n            memoryline:_this.isMemoryAlertLine,\r\n            networkline:_this.isNetworkAlertLine,\r\n            diskRootLine:_this.isDiskRootAlertLine,\r\n            diskRoot01Line:_this.isDiskRoot01AlertLine,\r\n          })    \r\n        });\r\n      })\r\n    },\r\n    upSingleTaskData(taskObj,taskMark,taskName){//把当前任务传入timingTaskPop子组件\r\n      var _this=this;\r\n      if(taskObj.status=='running'){\r\n        _this.isRunning=true;\r\n      }else{\r\n        _this.isRunning=false;\r\n      }\r\n      _this.alertMark=taskMark;\r\n      _this.taskTypeTxt=taskName;\r\n      _this.timingTaskform=taskObj;\r\n      _this.editTaskId=taskObj.id;\r\n      _this.isShowTimingTaskEdit=true;\r\n    },\r\n    lineTimer(){\r\n      return new Promise((resolve,reject)=>{\r\n        client.search({\r\n          index:this.publicChart[this.chartType].searchIndex,\r\n          body:{\r\n            \"size\": 0,\r\n            \"aggs\" : {\r\n              \"langs\" : {\r\n                \"terms\" : {\r\n                  \"field\" : \"host.hostname\"\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }).then((res)=>{\r\n          // console.log(res)\r\n          if(!res.aggregations){//如果metricbeat上数据有问题就会导致aggregations这段无返回\r\n            resolve([]);\r\n          }else{//保证系统安装无误的情况下\r\n            resolve(res.aggregations.langs.buckets);\r\n          }\r\n        })\r\n      })\r\n    },\r\n    getMountpoint(){\r\n     let fromTime=toISO8601(new Date(Date.now()-10000)),\r\n          endTime=toISO8601(new Date()); \r\n        client.search({\r\n          index:this.publicChart[this.chartType].searchIndex,\r\n          body:{\r\n            \"size\": 0,\r\n            \"query\": {\r\n                \"bool\": {\r\n                  \"filter\": [{\r\n                    \"range\": {\r\n                      \"@timestamp\": {\r\n                        \"from\": fromTime,\r\n                        \"to\": endTime,\r\n                        \"include_lower\": true,\r\n                        \"include_upper\": true\r\n                      }\r\n                    }\r\n                  }]\r\n                }\r\n              },\r\n                \"aggs\" : {\r\n                  \"langs\" : {\r\n                    \"terms\" : {\r\n                      \"field\" : \"system.filesystem.mount_point\"\r\n                    },\r\n                    \"aggs\": {\r\n                      \"totalpercent\": {\r\n                        \"avg\": {\r\n                          \"field\": \"system.filesystem.used.pct\"\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n          }\r\n        }).then((res)=>{\r\n           let resolveBuckets=res.aggregations.langs.buckets;\r\n           console.log(resolveBuckets)\r\n           if(resolveBuckets.length==0){\r\n             this.line6Nodata=true;\r\n           }else{\r\n             this.mountPointData=resolveBuckets;\r\n             this.line6Nodata=false;\r\n           }\r\n           \r\n        })\r\n    },\r\n    fullScreen(){//大屏展示\r\n      var chartGridDom = document.getElementsByClassName('dashboard-wrapper');\r\n      chartGridDom[0].requestFullscreen();\r\n\r\n      window.addEventListener(\"fullscreenchange\", (e) => {\r\n        if (document.fullscreenElement) {\r\n          // console.log('进入全屏')\r\n          this.isShowQueryPanel = false;\r\n          this.isShowGridMenu = false;\r\n        } else {\r\n          // console.log('退出全屏')\r\n          this.isShowQueryPanel = true;\r\n          this.isShowGridMenu = true;\r\n        }\r\n      })\r\n    },\r\n\r\n\r\n  },\r\n  filters:{\r\n    percentFormat(num){\r\n      return (num*100).toFixed(1)+\"%\"\r\n    }\r\n  },\r\n  beforeDestroy(){\r\n    window.removeEventListener('resize',function(){});\r\n  }\r\n};\r\n</script>\r\n<style>\r\n.dashboard-wrapper{\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 15px;\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.changePanel{\r\n  width: 100%;\r\n  margin-bottom: 15px;\r\n}\r\n.changeBox{\r\n  padding:15px;\r\n  background: #f7f7f7;\r\n  border: 1px solid #eee;\r\n  /* box-shadow: 2px 2px 5px #ccc; */\r\n  box-sizing: border-box;\r\n}\r\n.dashboardContent{\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  padding-right: 10px;\r\n}\r\n\r\n.chartRow{\r\n  margin-bottom: 10px;\r\n}\r\n.chartBox{\r\n  height: 300px;\r\n  width: 100%;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  /* box-shadow: 2px 2px 5px #ccc; */\r\n}\r\n\r\n/* loading 主要针对‘自定义图表’的loading */\r\n.dashboard-wrapper .el-loading-spinner{\r\n  padding: 3px;\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  text-align: right;\r\n  margin-top: 0;\r\n}\r\n.dashboard-wrapper .el-loading-spinner i{\r\n  color: #242222;\r\n  font-size: 18px;\r\n}\r\n.mountpointbox{\r\n  border: 1px solid #f7f7f7;\r\n}\r\n.mountpointtitle{\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  text-align: center;\r\n  color: #000;\r\n  line-height: 28px;\r\n  padding: 12px 0;\r\n  margin-bottom: 12px;\r\n  border-bottom: 1px solid #f7f7f7;\r\n  \r\n}\r\n.mountpoint{\r\n  display: flex;\r\n  padding:12px;\r\n  border-bottom: 1px solid #f7f7f7;\r\n}\r\n.mountpoint:last-child{\r\n  border-bottom: none;\r\n}\r\n.mountpoint .item{\r\n  flex:1\r\n}\r\n.line6Nodata{\r\n  text-align: center;\r\n  line-height: 28px;\r\n}\r\n</style>\n\n\n// WEBPACK FOOTER //\n// src/components/dashboard/dashboard.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"dashboard-wrapper\"},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isShowQueryPanel),expression:\"isShowQueryPanel\"}],staticClass:\"changePanel\"},[_c('div',{staticClass:\"changeBox\"},[_c('el-select',{attrs:{\"placeholder\":\"请选择\"},on:{\"change\":_vm.chartTypeChange},model:{value:(_vm.chartType),callback:function ($$v) {_vm.chartType=$$v},expression:\"chartType\"}},[_c('el-option',{attrs:{\"label\":\"防御节点\",\"value\":\"shadow\"}}),_vm._v(\" \"),_c('el-option',{attrs:{\"label\":\"管理平台\",\"value\":\"cm\"}})],1)],1)]),_vm._v(\" \"),_c('div',{staticClass:\"dashboardContent\"},[_c('el-row',{staticClass:\"chartRow\",attrs:{\"gutter\":10}},[_c('el-col',{attrs:{\"span\":12}},[_c('div',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.cpuLoading),expression:\"cpuLoading\"}],staticClass:\"chart-content\",attrs:{\"element-loading-spinner\":\"el-icon-loading\",\"element-loading-background\":\"rgba(0, 0, 0, 0)\"}},[(_vm.cpuLineNodata)?_c('pienodata',{attrs:{\"mystyle\":\"linenodata\"}}):_vm._e(),_vm._v(\" \"),_c('div',{staticClass:\"chartBox\",attrs:{\"id\":\"cpuLineContainer\"}})],1)]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":12}},[_c('div',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.memoryLoading),expression:\"memoryLoading\"}],staticClass:\"chart-content\",attrs:{\"element-loading-spinner\":\"el-icon-loading\",\"element-loading-background\":\"rgba(0, 0, 0, 0)\"}},[(_vm.memoryLineNodata)?_c('pienodata',{attrs:{\"mystyle\":\"linenodata\"}}):_vm._e(),_vm._v(\" \"),_c('div',{staticClass:\"chartBox\",attrs:{\"id\":\"memoryLineContainer\"}})],1)])],1),_vm._v(\" \"),(_vm.chartType=='shadow')?_c('el-row',{staticClass:\"chartRow\",attrs:{\"gutter\":10}},[_c('el-col',{attrs:{\"span\":12}},[_c('div',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.tcpLoading),expression:\"tcpLoading\"}],staticClass:\"chart-content\",attrs:{\"element-loading-spinner\":\"el-icon-loading\",\"element-loading-background\":\"rgba(0, 0, 0, 0)\"}},[(_vm.line3Nodata)?_c('pienodata',{attrs:{\"mystyle\":\"linenodata\"}}):_vm._e(),_vm._v(\" \"),_c('div',{staticClass:\"chartBox\",attrs:{\"id\":\"myLine3\"}})],1)]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":12}},[_c('div',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.httprequestLoading),expression:\"httprequestLoading\"}],staticClass:\"chart-content\",attrs:{\"element-loading-spinner\":\"el-icon-loading\",\"element-loading-background\":\"rgba(0, 0, 0, 0)\"}},[(_vm.line4Nodata)?_c('pienodata',{attrs:{\"mystyle\":\"linenodata\"}}):_vm._e(),_vm._v(\" \"),_c('div',{staticClass:\"chartBox\",attrs:{\"id\":\"myLine4\"}})],1)])],1):_vm._e(),_vm._v(\" \"),(_vm.chartType=='shadow')?_c('el-row',{staticClass:\"chartRow\",attrs:{\"gutter\":10}},[_c('el-col',{attrs:{\"span\":12}},[_c('div',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.networkLoading),expression:\"networkLoading\"}],staticClass:\"chart-content\",attrs:{\"element-loading-spinner\":\"el-icon-loading\",\"element-loading-background\":\"rgba(0, 0, 0, 0)\"}},[(_vm.line5Nodata)?_c('pienodata',{attrs:{\"mystyle\":\"linenodata\"}}):_vm._e(),_vm._v(\" \"),_c('div',{staticClass:\"chartBox\",attrs:{\"id\":\"myLine5\"}})],1)]),_vm._v(\" \"),_c('el-col',{attrs:{\"span\":12}},[_c('div',{staticClass:\"mountpointbox\"},[_c('h3',{staticClass:\"mountpointtitle\"},[_vm._v(\"磁盘空间占比\")]),_vm._v(\" \"),(_vm.line6Nodata)?_c('p',{staticClass:\"line6Nodata\"},[_vm._v(\"暂无数据\")]):_vm._e(),_vm._v(\" \"),_vm._l((_vm.mountPointData),function(item){return _c('div',{staticClass:\"mountpoint\"},[_c('span',{staticClass:\"item\"},[_vm._v(_vm._s(item.key))]),_vm._v(\" \"),_c('span',{staticClass:\"item\"},[_vm._v(_vm._s(_vm._f(\"percentFormat\")(item.totalpercent.value)))])])})],2)])],1):_vm._e()],1),_vm._v(\" \"),_c('timing-task-pop',{attrs:{\"isNeedRefreshAddTask\":true,\"isShow\":_vm.isShowTimingTask,\"myTaskType\":'esSearch',\"myTaskTypeTxt\":_vm.taskTypeTxt,\"alertmark\":_vm.alertMark},on:{\"getTimingTask\":_vm.getAllchart,\"setTimingTaskClose\":function($event){_vm.isShowTimingTask=false}}}),_vm._v(\" \"),_c('timing-task-pop',{attrs:{\"isRunning\":_vm.isRunning,\"isChartEdit\":_vm.isChartEdit,\"editData\":_vm.timingTaskform,\"editTaskId\":_vm.editTaskId,\"isShow\":_vm.isShowTimingTaskEdit,\"isShowTimingTaskEdit\":_vm.isShowTimingTaskEdit,\"myTaskType\":_vm.timingTaskform.taskType,\"myTaskTypeTxt\":_vm.taskTypeTxt,\"alertmark\":_vm.alertMark},on:{\"getTimingTask\":_vm.getAllchart,\"setTimingTaskClose\":function($event){_vm.isShowTimingTaskEdit=false}}}),_vm._v(\" \"),_c('networkcp',{attrs:{\"isShow\":_vm.networkcpShow},on:{\"isDone\":function($event){_vm.networkcpShow=false}}}),_vm._v(\" \"),_c('ul',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isShowGridMenu),expression:\"isShowGridMenu\"}],staticClass:\"operationBtnUl\"},[_c('li',[_c('img',{attrs:{\"src\":\"static/icon/fullScreen.png\",\"alt\":\"大屏展示\",\"title\":\"大屏展示\"},on:{\"click\":_vm.fullScreen}})])])],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-ea08cb90\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/dashboard/dashboard.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-ea08cb90\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./dashboard.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./dashboard.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./dashboard.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-ea08cb90\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./dashboard.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/dashboard/dashboard.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}